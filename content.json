{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yankaili2006.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-03-05T02:51:50.099Z","updated":"2021-03-05T02:51:50.099Z","comments":false,"path":"/404.html","permalink":"http://yankaili2006.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2021-03-05T02:51:50.122Z","updated":"2021-03-05T02:51:50.122Z","comments":false,"path":"books/index.html","permalink":"http://yankaili2006.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-03-05T02:51:50.122Z","updated":"2021-03-05T02:51:50.122Z","comments":false,"path":"about/index.html","permalink":"http://yankaili2006.github.io/about/index.html","excerpt":"","text":"曾就职于四大行、BAT、创业公司，从事过消费金融、大数据风控、P2P、证券期货等业务开发架构工作，金融IT老兵。"},{"title":"分类","date":"2021-03-05T02:51:50.122Z","updated":"2021-03-05T02:51:50.122Z","comments":false,"path":"categories/index.html","permalink":"http://yankaili2006.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-03-05T02:51:50.125Z","updated":"2021-03-05T02:51:50.125Z","comments":true,"path":"links/index.html","permalink":"http://yankaili2006.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-03-05T02:51:50.125Z","updated":"2021-03-05T02:51:50.125Z","comments":false,"path":"repository/index.html","permalink":"http://yankaili2006.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-03-05T02:51:50.125Z","updated":"2021-03-05T02:51:50.125Z","comments":false,"path":"tags/index.html","permalink":"http://yankaili2006.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"前端开发/css","slug":"前端开发/css","date":"2021-03-05T02:51:50.121Z","updated":"2021-03-05T02:51:50.121Z","comments":true,"path":"2021/03/05/前端开发/css/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/css/","excerpt":"","text":"css教程 css语法CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明 selector {declaration1; declaration2; ... declarationN }如何插入样式表当读取到一个样式表时，浏览器会根据它来格式化 HTML 文档。插入样式表的方法有以下三种： 外部样式表(External style sheet) &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt;内部样式表(Internal style sheet) &lt;head&gt; &lt;style&gt; hr{color:sienna;} p{margin-left:20px;} body{background-image:url(&quot;images/back40.gif&quot;);} &lt;/style&gt; &lt;/head&gt;内联样式(Inline style) &lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;HTML中文网&lt;/p&gt;样式继承规则 如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。 多重样式优先级 一般情况下，优先级如下： 内联样式 &gt;内部样式 &gt;外部样式&gt; 浏览器默认样式注意：如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式 嵌套选择器适用于选择器内部的选择器的样式,例： p{ }: 为所有的 p 元素指定一个样式 .demo }: 为所有的class=&quot;demo&quot; 的元素指定一个样式 .demo p{ }: 为所有 class=&quot;demo&quot; 元素内的 p 元素指定一个样式 p.demo{ }: 为所有 class=&quot;demo&quot; 的 p 元素指定一个样式","categories":[],"tags":[]},{"title":"大唐兴亡三百年","slug":"读书笔记/大唐兴亡三百年","date":"2021-03-05T02:51:50.121Z","updated":"2021-03-05T02:51:50.121Z","comments":true,"path":"2021/03/05/读书笔记/大唐兴亡三百年/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%94%90%E5%85%B4%E4%BA%A1%E4%B8%89%E7%99%BE%E5%B9%B4/","excerpt":"","text":"2020-06-25 读到安史之乱的部分，安禄山和史思明叛乱，历时七年之久，拉开了150年动荡的中晚唐时期的序幕，它的意义超过了叛乱本身。似乎历时的发展进入了一个恶性循环之中，历时的车轮在某种力量的牵引之下滚滚向前，走向极乱，然后再一次大治。对比目前的现状，以贸易战为特征，似乎也揭开某个时代的序幕。信用在坍塌，制度的权威性在不断被挑战，主导力量开始发生了变化。有一句话可能是对的：今年是最坏的一年，今年是最好的一年。想必处于乱世之初的大唐子民也是这种感受吧。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yankaili2006.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"历史","slug":"历史","permalink":"http://yankaili2006.github.io/tags/%E5%8E%86%E5%8F%B2/"},{"name":"唐朝","slug":"唐朝","permalink":"http://yankaili2006.github.io/tags/%E5%94%90%E6%9C%9D/"}]},{"title":"数据交易和区块链","slug":"公众号-一聪财经/数据交易和区块链","date":"2021-03-05T02:51:50.120Z","updated":"2021-03-05T02:51:50.120Z","comments":true,"path":"2021/03/05/公众号-一聪财经/数据交易和区块链/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%98%93%E5%92%8C%E5%8C%BA%E5%9D%97%E9%93%BE/","excerpt":"","text":"今天有两个比较火的时间，一个是港交所的李小加呼吁成立”数据要素产业化联盟”；另一则是发改委明确将”区块链”纳入新基建的范畴。 中央近期出台了《关于构建更加完善的要素市场化配置体制机制的意见》，首次明确将数据纳入生产要素。《意见》提出了三个核心目标：一是推进政府数据开放共享；二是提升社会数据资源价值；三是加强数据资源整合和安全保护。公众号文章，对以下几个问题做了探讨：数据是谁的？如何确权？数据能用来干什么、不能干什么？（安全与隐私）什么数据可以垄断？什么数据必须共享？如何交易数据？（商业模式）投资数据市场的钱从哪里来、往哪里去？（资本市场）数据市场应该由谁来监管？（政策法规）数据市场应该是人管还是技术管？技术标准应该由政府选定还是市场发展？我们应该闭门造车，还是走向世界？ 从数据的确权，到数据资产化交易，数据隐私保护，数据市场的形成，数据市场的监管，做了各方面阐述。可以预见在数据行业这个赛道，在经历了去年行业大清洗之后，将会出现新的创新力量。 国家发改委召开例行在线新闻发布会，国家发改委创新和高技术发展司司长伍浩回应外界对新基建的热议，他表示，关于新型基础设施的概念，初步研究认为，是以新发展理念为引领，以技术创新为驱动，以信息网络为基础，面向高质量发展需要，提供数字转型、智能升级、融合创新等服务的基础设施体系。伍浩介绍，目前来看，新型基础设施主要包括3个方面内容：一是信息基础设施。主要是指基于新一代信息技术演化生成的基础设施，比如，以5G、物联网、工业互联网、卫星互联网为代表的通信网络基础设施，以人工智能、云计算、区块链等为代表的新技术基础设施，以数据中心、智能计算中心为代表的算力基础设施等。二是融合基础设施。主要是指深度应用互联网、大数据、人工智能等技术，支撑传统基础设施转型升级，进而形成的融合基础设施，比如，智能交通基础设施、智慧能源(4.280, 0.01, 0.23%)基础设施等。三是创新基础设施。主要是指支撑科学研究、技术开发、产品研制的具有公益属性的基础设施，比如，重大科技基础设施、科教基础设施、产业技术创新基础设施等。 区块链技术作为一种生产工具，可以是技术和经济模型的结合体，可以有效地改善生产要素的组织和协作方式，合理地运用，将会不断产生新的业务模式。 然而，有没有一个行业同时占了这两个赛道呢，将数据资产化和区块链技术结合。目前差一个具有极强创新能力和团队和产品出现。相信不远将会看到。","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"数据要素化","slug":"数据要素化","permalink":"http://yankaili2006.github.io/tags/%E6%95%B0%E6%8D%AE%E8%A6%81%E7%B4%A0%E5%8C%96/"},{"name":"区块链","slug":"区块链","permalink":"http://yankaili2006.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"},{"name":"立法","slug":"立法","permalink":"http://yankaili2006.github.io/tags/%E7%AB%8B%E6%B3%95/"}]},{"title":"量化交易平台研究","slug":"公众号-一聪财经/量化交易平台研究","date":"2021-03-05T02:51:50.120Z","updated":"2021-03-05T02:51:50.121Z","comments":true,"path":"2021/03/05/公众号-一聪财经/量化交易平台研究/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%E7%A0%94%E7%A9%B6/","excerpt":"","text":"1token.tradehttps://1token.trade/ 量化交易平台 Futuremoney","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"量化交易","slug":"量化交易","permalink":"http://yankaili2006.github.io/tags/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"}]},{"title":"股票交易所清结算和虚拟货币券商模式对比","slug":"公众号-一聪财经/股票交易所清结算和虚拟货币券商模式对比","date":"2021-03-05T02:51:50.120Z","updated":"2021-03-05T02:51:50.120Z","comments":true,"path":"2021/03/05/公众号-一聪财经/股票交易所清结算和虚拟货币券商模式对比/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93%E6%89%80%E6%B8%85%E7%BB%93%E7%AE%97%E5%92%8C%E8%99%9A%E6%8B%9F%E8%B4%A7%E5%B8%81%E5%88%B8%E5%95%86%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94/","excerpt":"","text":"传统股票交易所的模式，涉及到股票投资人、券商、存管银行、交易所和中国结算。其中，中国结算分为中国证券登记结算公司（简称中证登）和中国债权登记结算公司（中债登），这里指中证登。出入金和买卖股票的业务流程如下： 之所以设计这么复杂的流程，本质上在于将证券和钱进行分离。即，证券资金存管在银行，开销户、资金划拨、报送监管，都需要通过银行三方存管系统。钱由存管银行保存和管理。 证券开销户、持有登记、对账清算，由中证登主要负责，券由中国结算保存和管理。 在虚拟货币领域，代币是有价值的，可以认为是券和钱的统一，用户通过私钥保护代币。 去中心化交易所，例如bancor、0x project、loopring protocol等，可以实现链上撮合和清算，即虚拟资产的实时转移，因此不需要代币的存管机构，可以实现完全的去中介化交易。 最近流行的虚拟券商模式，我认为是一种折中模式，撮合的高并发要求和资产的去中心化管理是不可调和的矛盾。因此撮合使用中心化系统，保证高并发，链下实现。资金清算，通过链上进行，称作清算链，为了保证性能，只能采用pos或者dpos方式。 好处很明显：1、资金安全透明；2、撮合性能基本没有损耗；3、去中心化的清算，使得虚拟券商模式可行； 缺点也很明显：1、复杂度高，链上链下同步数据问题；2、操作流程边长，用户体验略差； 无论哪种模式，能满足各方诉求，被机构和用户认可才价值。所以，看效果。","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"清结算","slug":"清结算","permalink":"http://yankaili2006.github.io/tags/%E6%B8%85%E7%BB%93%E7%AE%97/"},{"name":"虚拟券商","slug":"虚拟券商","permalink":"http://yankaili2006.github.io/tags/%E8%99%9A%E6%8B%9F%E5%88%B8%E5%95%86/"}]},{"title":"OK和币安的反击","slug":"公众号-一聪财经/OK和币安的反击","date":"2021-03-05T02:51:50.119Z","updated":"2021-03-05T02:51:50.119Z","comments":true,"path":"2021/03/05/公众号-一聪财经/OK和币安的反击/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/OK%E5%92%8C%E5%B8%81%E5%AE%89%E7%9A%84%E5%8F%8D%E5%87%BB/","excerpt":"","text":"Fcoin大火之后，吸流量厉害，三大交易所币安、火币和Okcoin都感受到了用户和资金流失。OKcoin第一个推出反制措施，扶持100家交易即挖矿的交易所，币安扶持1000家。 有两个作用：第一，尽早认清交易即挖矿的本质；第二，配合币王微博言论，打压Fcoin的势头。 但是，需要认清楚，交易所不会革自己的命，也不会养虎为患，因此，这两种模式都是没有诚意的，都不会真正推广开来。 交易所的本质是提供流动性，流动性由交易产生，交易背后是用户和资金。所以关键点在用户和资金。 ok和币安的模式中，帮助企业搭建交易所业务，提供技术方案，流动性共享等。但是回避关键点，用户算谁的，用户资金存放在哪里，用户交易数据存放在哪里。 最关键的点，在于用户充值进来的BTC等资金存放在哪里。归谁支配。 肯定是存放在ok和币安的交易所系统中，扶持起来的交易所，只是一个类似营业网点的直销机构、代理渠道，赚取获客费用。失去了交易所的意思。 因此，这个模式必然不会实行起来，也不会被大多数想做交易所的团队接受。其实还有更好的模式，后面的文章继续探讨。","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"Fcoin","slug":"Fcoin","permalink":"http://yankaili2006.github.io/tags/Fcoin/"},{"name":"交易挖矿","slug":"交易挖矿","permalink":"http://yankaili2006.github.io/tags/%E4%BA%A4%E6%98%93%E6%8C%96%E7%9F%BF/"},{"name":"FT","slug":"FT","permalink":"http://yankaili2006.github.io/tags/FT/"}]},{"title":"价格形成机制的思考","slug":"公众号-一聪财经/价格形成机制的思考","date":"2021-03-05T02:51:50.119Z","updated":"2021-03-05T02:51:50.120Z","comments":true,"path":"2021/03/05/公众号-一聪财经/价格形成机制的思考/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/%E4%BB%B7%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9C%BA%E5%88%B6%E7%9A%84%E6%80%9D%E8%80%83/","excerpt":"","text":"交易的思考价格的含义“生命诚可贵，爱情价更高”“信心比黄金贵” 我们思考的价格的时候，都会对照某一类资产。即，价格是某个资产对另外一个的比率。大多数情况下，以法币为参考资产作对比衡量。 价格有很多种，按照心里预期和实际成交，房价分为挂牌价和成交价。按照时间远近，大宗商品分为现货价格和期货价格。 我们要讨论的是指即时成交价格，即不考虑交易摩擦，资产自由兑换流动，不同资产之间的汇率。 价格形成采用归纳法进行分析 序号 价格形成周期 资产类型 方式 人工参与 登记变更 1 集合竞价 股票、虚拟货币、期货 毫秒级 否 自动化 2 集中时间段报价竞价 艺术品拍卖、司法拍卖、招标、车牌指标 分钟级 否 人工参与 3 人工撮合 房产、股权、二手车 日级 是 人工参与 4 固定价格 医疗服务、教育、汽油、汽车 月级 是 多样化 很多资产的价格，并没有那么直接的显现出来。例如工资，实际上代表的某个人的工作时间的市场价格。 价格的形成机制决定了资产的流动性。 需求导致价格有需求的东西，就会有人愿意去换，这样就形成了价格，有价格就有可能增值或者减值，即可定义为资产。 最典型的例子是户口指标。本身作为政策的产物是一种制度，是不允许交易的。 价格的组成","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"价格形成机制","slug":"价格形成机制","permalink":"http://yankaili2006.github.io/tags/%E4%BB%B7%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9C%BA%E5%88%B6/"}]},{"title":"FT模式分析","slug":"公众号-一聪财经/FT模式分析","date":"2021-03-05T02:51:50.118Z","updated":"2021-03-05T02:51:50.118Z","comments":true,"path":"2021/03/05/公众号-一聪财经/FT模式分析/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/FT%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/","excerpt":"","text":"Fcoin火的一塌糊涂，本文试图剖析Fcoin的经济模型和设计思路 FT本质上是一个资金盘，本质上也是一次变相ICO。在风险暴露之前，如果FT可以成功转型，则可以安全着陆。 关键点：FT平台币我认为Fcoin成功的关键在于引入了平台币FT。 试想一下，如果没有FT，而是使用目前市面上的币例如USDT，用户刷量的币对是BTC/USDT，刷出来的手续费是100USDT。返还逻辑如下： 1）按照手续费的120%返还给用户，刷量用户支持100USDT的手续费，获得120USDT的返利，净赚20USDT;2）把等量的手续费分红，100USDT返还给FT持有者； 也就是说Fcoin收到了100个USDT的费用，返还给社区220USDT，多出来的120个USDT从哪里来的呢，聪明的你肯定想到答案了。 如果这样玩，估计Fcoin很快就会死掉。引入平台币FT，玩法立马就高级了很多。 币对变成了FT/USDT，Fcoin收到的手续费依然是100个USDT，假设FT的价格是1美元一枚，那么返还给刷量用户120个FT，返还给FT持有者100个FT。 相当于Fcoin平台做了一次FT货币超发，认为制造了通货膨胀，FT贬值到了100/220 = 0.45。这就是中心化平台币的魅力，随意改数据库上的数字就好了。 虽然你的账号上显示你持有的FT价值100USDT，但是实际价值是45USDT。不知不觉你的真金白银被人转移走了。用户用手里的真金白银USDT，换回了自认为值钱的FT，也就是帮助撑起了FT的市值，这就是变相ICO。 FT虽然内在价值少了，但是仍然可以提现，变成了谁先变现出去的游戏。 自治的社区型交易平台Fcoin不使用中心化的公司架构，不设CEO和董事会… 将由全体FT持有者通过智能合约投票完成社区治理 用大白话来说就是：我们公司没有CEO，不会为整个事件负任何责任，你们亏了赚了跟我们没关系，是群体行为和币价波动的结果，因为我们是社区型组织。 聪明的你信吗？ FT价值生产和分配FT的价值生产和分配有这样几段话。 数字货币的支付工具属性和投资标的物属性，数字货币做一个定义的辨析——支付工具与投资工具的辨析：Coin or Token？ 本文中所定义的Coin，对标现实社会中的现金，强调支付工具的作用。而本文中所定义的Token，这里特指具备经济激励机制的通证，对标现实社会中的证券或者股权。 两者之间显然是不同的，Coin是鼓励流通来产生使用价值，而Token是鼓励持有来产生投资价值。 首先，我们定义Coin是一个社区系统中用于流通的现金，而Token则代表了这个社区系统的所有者权益； 然后，我们仍然采用POW机制来发行Coin，这里和比特币类似，“矿工挖矿”并获得Coin的奖励； 接下来，我们采用“交易即挖矿”的机制来发行Token，即每一笔Coin转账交易支付的手续费（也是Coin），按固定比率或算法折算成Token，奖励给交易发出者（即支付手续费的人）； 最后，我们规定Coin转账的手续费（也是Coin）并不随“挖矿”奖励给“矿工”，而是先累积并定期按Token的持有比例奖励给社区全体Token的持有者； 至此，我们通过POW机制及“交易即挖矿”机制的结合，同时完成了一个社区的Coin和Token的发行 直白一点讲，说了一件核心逻辑，张健认为交易和持有FT都是有价值的，都是生产价值的行为，所有这两种行为都要参与价值分配。 因此就有了，平台收到100FT的手续费，分配给矿工一次，分配给FT持有者一次。 聪明之处利用平台币的暴涨暴跌，将散户的真金白银锁住，用户的BTC变成了没有真实价值的FT。同时完成了FT的ICO发行。 比资金盘的聪明之处，用户持有的FT价格现将了，但币没有少，没有损失币，有人会幻想有一天还会涨回来。 FT白皮书 Fcoin的价值创造逻辑","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"Fcoin","slug":"Fcoin","permalink":"http://yankaili2006.github.io/tags/Fcoin/"},{"name":"交易挖矿","slug":"交易挖矿","permalink":"http://yankaili2006.github.io/tags/%E4%BA%A4%E6%98%93%E6%8C%96%E7%9F%BF/"},{"name":"FT","slug":"FT","permalink":"http://yankaili2006.github.io/tags/FT/"}]},{"title":"FT的新模式和追随者们的微创新","slug":"公众号-一聪财经/FT的新模式和追随者们的微创新模式分析","date":"2021-03-05T02:51:50.118Z","updated":"2021-03-05T02:51:50.118Z","comments":true,"path":"2021/03/05/公众号-一聪财经/FT的新模式和追随者们的微创新模式分析/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/FT%E7%9A%84%E6%96%B0%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%BF%BD%E9%9A%8F%E8%80%85%E4%BB%AC%E7%9A%84%E5%BE%AE%E5%88%9B%E6%96%B0%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/","excerpt":"","text":"FT追随者们的交易即挖矿微创新 “错过了FT，不要错过XX”，熟悉的宣传语。FT私募价格0.08元左右，半个月时间，最高涨到7元左右，涨幅80多倍，引爆了低迷的交易所圈子。因此，诞生了很多XX即挖矿的交易所，本文分析FT的破局之路，梳理模仿追随者们微创新模式。 Fcoin破局之路FT6月15日触顶之后，一路向下狂泻不止，用户和资金大规模撤退，FT能否挺住不崩盘，是张健要解决的问题。 平准基金 6月22日，平准基金完成1亿FT募集； 6月25日，按照5日FT均价0.5008737USDT向平台完成质押并收到价值5000万USDT的质押款。 平准基金资产余额：0FT，5000万USDT。 买入约3286万FT，买入均价约为0.4782USDT，消耗1571万USDT； 平准基金资产余额：3286万FT，3429万USDT 6月26日，再次买入约3336万FT，买入均价为0.3812USDT，消耗1271万USDT。 平准基金资产余额：6622万FT，2157万USDT。 截止公告发布之时购入FT均价为0.4293USDT。 本质上，FT质押给资金，换取USDT出来，用来购买FT托盘。 Finsu私募为了给FCoin用户以参与私募的机会，FInsur私募2000ETH，价格1ETH:50000FI，按照FT持有的比例给散户分配额度。 本质上，交易所利用用户优势，私募做成了公募 创业板上币采取单向千分之二的收取策略，即卖方收取千分之二的手续费，买方免费。采取“累计充值人数排名”上线的机制。累计排名前20的币种获得上币资格。 ETH网络手续费，7.1日增长了5倍，7月2日。转账手续费暴增。 Fcoin的思路是，用用户的真金白银托住FT价格，同时引入新的币种，吸引新的真实用户入场，带来新的BTF或者ETH，同时创造持续的手续费。 Coineal用户分层控制泡沫速度Coineal白皮书没什么可圈可点指出，模仿Fcoin。创新之处在于分层用户体系。 提出了一个概念：流动性即挖矿，提到了交易所的本质是提供流动性，然而，只有交易才会产生流动性， 本质上，还是交易即挖矿。 需要提醒一下，账号后面并没有矿机对应，而是指修改数据库上的数字，不同账号，计算金额的倍数不同而已。 Coineal有两个特点： 通过邀请方式构建的四层账号体系，限制账户个数； 只有前1W币交易返利； 本质上，Coineal把平台币泡沫吹起来的过程做了人为控制，即认为控制平台币的发行，或者说贬值速度。 另外，平台不鼓励不受控制的刷量行为，普通账号刷量，只能通过量化策略取胜，即优秀的策略吃失败的策略，或者吃人工交易的利润。 后续可能分账号控制挖矿的量，从而控制币价的增长。因为对平台来说，理想的发展方式是，平台币稳步上涨，真实用户的比例不断增加。 可以预见一定时期内，这些受控账号的交易量会占大比重，因此这些账号，可以理解为股市中的国家队，负责保持大盘平稳，也就是控盘，好处是分得大部分利润。 我认为这是相对比较靠谱的模式。 Coineal白皮书 OCX.com超级矿工计划OCX有几点创新： 参与第一期超级矿工计划的用户，自公告之日起三天内，如因币价下跌原因导致亏损的，由平台提供补偿。 参与超级矿工计划锁仓的OCX，锁仓满1个月可获得5%收益，锁仓不享受持币分红。 手续费收入的40%用于持币用户分红，40%用于回购，每日完成回购，并打入公开地址销毁，10%注入平准基金，10%用于平台运营。 第三点，一定周期内，如果由于币价下跌导致的损失，平台承诺兜底。这就类似于股灾的时候，国家队接盘银行证券保险股了； 第四点，鼓励一个月定期理财，年化收益12*5%=60%，但是注意这里是按照OCX计息的。目的是把大户转化为锁仓力量，不要换BTC或者ETH出去； 第五点，回购是维持币价稳定的手段。 manbiwang.com满币网割大户满币没什么创新，只是阐述一下没底线的操作方式，利用热度拉一波，把大户和散户都套在山顶山，庄家已经弃盘，要归零的。 总结Fcoin的创新能力很强，不断推出新的玩法。追随者们不止在创新上跟不上步伐，技术能力上也差一个数量级，由于无法承受高并发，有的直接当掉了，有的卡单严重，总之体验极差。这一点，不得不佩服Fcoin的技术实力。","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"Fcoin","slug":"Fcoin","permalink":"http://yankaili2006.github.io/tags/Fcoin/"},{"name":"交易挖矿","slug":"交易挖矿","permalink":"http://yankaili2006.github.io/tags/%E4%BA%A4%E6%98%93%E6%8C%96%E7%9F%BF/"},{"name":"FT","slug":"FT","permalink":"http://yankaili2006.github.io/tags/FT/"}]},{"title":"Fomo3D现在火爆的区块链游戏和去中心化交易所","slug":"公众号-一聪财经/Fomo3D现在火爆的区块链游戏和去中心化交易所","date":"2021-03-05T02:51:50.118Z","updated":"2021-03-05T02:51:50.118Z","comments":true,"path":"2021/03/05/公众号-一聪财经/Fomo3D现在火爆的区块链游戏和去中心化交易所/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/Fomo3D%E7%8E%B0%E5%9C%A8%E7%81%AB%E7%88%86%E7%9A%84%E5%8C%BA%E5%9D%97%E9%93%BE%E6%B8%B8%E6%88%8F%E5%92%8C%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E4%BA%A4%E6%98%93%E6%89%80/","excerpt":"","text":"Pomo3D现在火爆的区块链游戏和去中心化交易所pomo3D为什么火官方地址 可以通过这个链接访问：https://exitscam.me/huobi 官方网址exit scam的意思是，逃离骗局。当有人把利息提走的时候，首页大字报形式显示，有人逃离了骗局。 开发者在网站明白告诉用户，这是一个基于区块链的去中心化资金盘，智能合约和资金存储在以太坊网络，公平公正。这是一个娱乐产品，而不是投资产品。这可以当做试一次社会学实验，贪婪和友谊相比，人们会选前者。（已经入局的人需要拉新，像不像微商？） 一天的时间，ETH余额从1000个，增长到目前的1.6W个，大约4000W人民币，总共投资金额超过7W个以太坊，大约2.1亿。 这个应用采用类似于bancor的算法，内置了去中心化交易所，值得深入研究和参考。后续再仔细研究。整个生态游两个代币：Powh3D作为主链，Fomo3D类似于侧链。 玩法介绍 玩法英文版 玩法中文版 分析文章 Fomo3D项目介绍+解析,最火的以太坊游戏 第一轮如何结束第一轮的结局是什么，是个热烈讨论的话题。 根据规则，24小时没有人下注，则最后一个下注的人为lucky boy。设想集中情况会导致24小时无人下注： Key的几个涨到添加，例如1key=1ETH，即3000元下一注，参与人数就很少了； ETH被消耗完，这个流通中的ETH被耗尽，这个不敢想象； 网站被ddos导致服务不可用，只能通过程序调用智能合约参与； 合约存在漏洞，资金丢失，游戏崩盘。 有人在群里提到，是否可以ddos这个网站，从而导致没有人可以下注，游戏结束。想法是美好的，实际上作者已经做了plan B，如果网站太火导致宕机，可以通过这个网页调用智能合约做交易。 写文章的功夫，主网站已经被攻击，不能访问，备选网站启动，主网恢复，大约宕机半小时时间。（这是去中心化的优势啊，正如作者所说，智能合约never sleep） 智能合约访问plan B 备选网站 Powh.io备份智能合约界面，由于极端的网站流行，兑换可能会下降，但智能合约永远不会睡觉。使用此备用界面可以安全地检查您的利息。如果这是您第一次使用Metamask 基础设施官方网站，给出了一些信息和工具： 智能合约地址 下注数据 官方讨论组 第三方的工具收益计算器 EOSEOS版本的玩法更加刺激，链接：https://eosbutton.io/，2分钟一盘，可以免费领取1W个EBT空投。 北京时间21日18点开始。 其他P3D和F3D有什么区别？PoWH3D（P3D）是一种加密货币交换和区块链游戏，您可以根据您持有的代币数量，在每次买入，卖出或交易P3D代币时获得被动的以太坊奖励！ P3D令牌充当所有当前和未来Team JUST项目的“House Token”。 FOMO3D（F3D）是一款活跃的区块链游戏，您可以在其中购买“钥匙”，然后从其他玩家那里获得奖励。 当计时器达到零时，最后一个买家收到一半的锅！ F3D和P3D是由JUST团队建立的独立项目，F3D根据所选团队向所有P3D持有者发送股息！ 为了获得最大的红利，我们鼓励您尝试两种方式！ 要开始使用P3D，请查看我们的P3D初学者指南。如果最后是熊队胜利的话P3D的收益会降低据地参考WIKI 参考文章 Fomo3D→P3D：规则之外，一场遍布彩蛋的华丽冒险 你玩的Fomo3D跟我玩的可能不太一样？[历史、数据、彩蛋全解析] 隐藏在Fomo3D背后的神秘世界 ether gashttps://ethgasstation.info/ http://www.usa-the-republic.com/illuminati/Secrets_of_the_Federal_Reserve.html https://uphold.com/login https://publishers.basicattentiontoken.org/publishers/log_in https://uphold.com/signup/confirm RAM交易所","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"去中心化交易所","slug":"去中心化交易所","permalink":"http://yankaili2006.github.io/tags/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E4%BA%A4%E6%98%93%E6%89%80/"},{"name":"Fomo3D","slug":"Fomo3D","permalink":"http://yankaili2006.github.io/tags/Fomo3D/"},{"name":"ETH","slug":"ETH","permalink":"http://yankaili2006.github.io/tags/ETH/"}]},{"title":"DECP","slug":"公众号-一聪财经/DCEP","date":"2021-03-05T02:51:50.117Z","updated":"2021-03-05T02:51:50.117Z","comments":true,"path":"2021/03/05/公众号-一聪财经/DCEP/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/DCEP/","excerpt":"","text":"从本月开始，深圳、雄安、成都、苏州的部分机关和事业单位的工资、补贴将通过数字货币发放。 一张央行数字货币DC/EP（Digital Currency Electronic Payment）的内测截图开始在朋友圈刷屏。与截图同时出现的，还有一则消息：DC/EP将首先在深圳、雄安、成都、苏州四个试点城市进行测试，从本月开始，上述城市的部分机关和事业单位的工资、补贴将通过DC/EP发放。4月17日晚间，央行数字货币研究所就央行数字货币内测一事回应称，目前数字人民币研发工作正在稳妥推进，数字人民币体系在坚持双层运营、M0替代、可控匿名的前提下，基本完成顶层设计、标准制定、功能研发、联调测试等工作，并遵循稳步、安全、可控、创新、实用原则，当前阶段先行在深圳、苏州、雄安、成都，以及未来的冬奥场景进行内部封闭试点测试，以不断优化和完善功能。但是央行数字货币研究所也表示，当前网传DC/EP信息为技术研发过程中的测试内容，并不意味着数字人民币正式落地发行。数字人民币目前的封闭测试不会影响上市机构商业运行，也不会对测试环境之外的人民币发行流通体系、金融市场和社会经济带来影响。 DC/EP有两个角色：一是数字货币，二是支付手段，两个角色是相辅相成的。 DC/EP是货币经济学中所讲的M0，也就是流通中的现金，在地位上，它和纸币是完全一样的。而第三方支付工具中的钱则是M2。我们使用这类的第三方支付软件时，其实是先把钱转到第三方支付公司的账户里，然后通过它们的账户来完成支付的。性质的不同，决定了DC/EP和第三方支付在使用过程中存在着一些不同：首先，DC/EP具有法偿性，交易方必须接受。其次，第三方支付在支付过程中，所有信息都是对交易平台透明的，而DC/EP在一定条件下则可以做到匿名支付。根据现有的信息来看，至少在央行层面，将不会采用区块链技术。其原因主要还是DC/EP在定性和发行目的上与其他数字货币不同。比特币等数字货币采用区块链技术，很大一个原因是要确保分布式记账下的共识，并由此来保证其本身的货币信用。而DC/EP作为法定货币，本身有国家作为信用担保，自然无需多此一举。与此同时，目前区块链技术从效率上看还不高。以比特币为例，每一次交易都要全网验证，需要大量的时间，这显然不能适用于大规模交易的进行。在运行模式上，DC/EP很可能会在现有货币的运行架构基础上进行适当调整，形成“一币、两库、三中心”的结构。所谓“一币”，就是由央行担保并签名发行的代表具体金额的加密数字串。“两库”就是中央银行发行库和商业银行的银行库，此外还加上流通市场上个人或单位用户的数字货币钱包。“三中心”，就是认证中心、登记中心和大数据分析中心。在这个结构下，DC/EP所改变的将主要是货币的运输和储存，其他的运作和现有的货币并不会有太多的变化。 主要关注以下几方面：1、不记付利息，对于小额、高频、零售场景比较适用，这一点有点像类似于银行卡的圈存业务；2、使用时遵循现行的现钞管理和反洗钱、防控融资等规定，涉及大额和可疑交易需要向人民银行汇报；3、DCEP可以在双方离线、无网的情况下完成支付，符合现金交易的特点，与支付宝和微信、银行App区别。这一点在技术上存在挑战。 DCEP的双离线支付可能采用可信硬件TEE技术，用来解决双花问题。然而技术本身并不可靠，可信硬件本身也会存在漏洞，一旦发现漏洞并被利用，会造成较大影响，所以相当长一段时间内，DCEP会处于试运行阶段。","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"DECP","slug":"DECP","permalink":"http://yankaili2006.github.io/tags/DECP/"}]},{"title":"EOS RAM是一次去中心化交易平台的实践","slug":"公众号-一聪财经/EOS RAM是一次去中心化交易平台的实践","date":"2021-03-05T02:51:50.117Z","updated":"2021-03-05T02:51:50.117Z","comments":true,"path":"2021/03/05/公众号-一聪财经/EOS RAM是一次去中心化交易平台的实践/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/EOS%20RAM%E6%98%AF%E4%B8%80%E6%AC%A1%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%AE%9E%E8%B7%B5/","excerpt":"","text":"EOS RAM是一次去中心化交易平台的实践EOS RAM作为一个新的炒作标的火了，也为EOS钱包、支持EOS充值的otcbtc.com和gate.io带来了免费流量。主流交易所顺势（被迫）开发了EOS充提，有的交易所上线了EOS RAM币对，来吸引（留住）用户。 EOS RAM初始价格为0.017EOS/KB，当前价格0.44EOS/KB，初始价格的25倍，最高价格，大约0.92EOS/KB，初始价格的50倍。半个月时间，创造一个市值约20亿的投资（炒作）标的。 实际上，在EOS生态内部，形成了一个脱离交易所撮合机制，报价和成交完全依赖系统的自动的去中心化交易平台，这个平台由EOS系统和钱包组成，交易品种为EOS生态内的资源EOS RAM。 过去24小时以EOS计价的RAM成交量5.2亿美元，交易手续费0.1%，EOS系统持有443W个EOS，价值3.6亿美元。（更多数据，可以看后面的EOS RAM网站） EOS RAM是什么？RAM为EOS生态内的最重要的资源：内存资源，在EOS生态内，建账号、写合约、转账等操作，都需要占用RAM。EOS系统采用Bencor算法，作为做市商 ，构建的一个RAM买卖交易平台。 RAM可以理解为EOS生态中的土地（地契），购买则买到了所有权+使用权，建房子、种地、开店、修路等动作，都需要使用。 买卖RAM必须要在EOS生态内，即使用EOS账号持有RAM。在一定程度上，RAM的火热，带动了EOS价格的上涨。 价格形成机制股票、虚拟币、大宗商品、外汇这类交易市场，都是采用报单撮合系统，成交价为实时价格，也就是价格是由撮合机制形成的。 EOS RAM基于Bencor算法，程序作为交易对手方，根据RAM的量提前给出价格，用户报买单和埋单，成交后，再更新价格。 公链资源证券化机制RAM实际上是一种可以重复利用的资源，在有效期内，可以占用和释放。提供了一种公链生态内，资源证券化的一种新思路。 只能在生态内使用，与账户体系紧密关联，无法充提到生态外部。 为什么不用EOSEOS RAM实际上是EOS生态中，某种资源的价格。而EOS是ICO使用的ERC20代币。 EOS系统作为交易对手方，RAM不能充提，只能从系统买，或者卖给系统。 进一步探讨的问题 虚拟币的价格形成机制，人为报价与量化交易，什么比例最合适。Bencor是一种做市商算法，另外有一个基于该算法的ICO项目bancor，实现虚拟币之间的无撮合兑换； 传统经济中，货币总量M=PQ/V。在虚拟经济体中，各种经济要素是系统已知的，货币的价格理论上是不是可以由系统算出来。 RAM交易数据完全透明，对交易所的价格形成机制，是不是存在借鉴意义。交易所如何引入这种货币的交易。（目前支持EOS RAM币对的实现方式，非常蹩脚） 有的文章提出EOS RAM是一种代币发行机制，或者侧链代币发行机制。可以进一步探讨。 EOS RAM 相关网站 EOS统计数据 价格走势和交易数据 参考资料 RAM熊市对冲？全方位了解EOS系统资源 EOS.IO 技术白皮书 第二版 捭阖命物eos】急文。eos熊市如何利用ram自救，逆风翻盘。 BM发文谈RAM市场和Bancor算法：RAM是稀缺商品 ICO-Bancor Protocol（班科协议）-投资可行性分析报告 Bancor中文白皮书 Bancor官网 货币的wikipedia","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"EOS","slug":"EOS","permalink":"http://yankaili2006.github.io/tags/EOS/"},{"name":"RAM","slug":"RAM","permalink":"http://yankaili2006.github.io/tags/RAM/"},{"name":"去中心化交易所","slug":"去中心化交易所","permalink":"http://yankaili2006.github.io/tags/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E4%BA%A4%E6%98%93%E6%89%80/"}]},{"title":"175号文","slug":"公众号-一聪财经/175号文","date":"2021-03-05T02:51:50.116Z","updated":"2021-03-05T02:51:50.116Z","comments":true,"path":"2021/03/05/公众号-一聪财经/175号文/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/175%E5%8F%B7%E6%96%87/","excerpt":"","text":"关于做好网贷机构分类处置和风险防范工作的意见 各省（自治区、直辖市）、深圳市网贷风险应对工作领导小组办公室，各省（区、市、计划单列市）P2P网贷风险专项整治工作联合工作办公室： 为深入贯落实党中央、国务院关于防范化解网贷行业风险工作的决策部署，按照“抓两头、促中间”的工作思路和“细化政策、分类实施”的工作要求，加快网贷行业风险出清，现就做好网贷机构分类处置和风险防范工作提出以下意见。 一、总体工作要求 坚持以机构退出为主要工作方向，除部分严格合规的在营机构外，其余机构能退尽退，应关尽关，加大整治工作的力度和速度。同时，稳妥有序推进风险处置，分类施策、突出重点、精准拆弹，确保行业风险出清过程有序可控，守住不发生系统性风险和大规模群体性事件的底线。 二、有效分类 各地应充分利用《关于开展P2P网络借贷机构合规检查工作的通知》（网贷整治办函（2018）63号）、《关于开展P2P网络借贷机构风险摸排检査与制定风险处置预案有关工作的通知》（整治办函〔2018）105号）的工作成果，在摸清辖内P2P网贷机构底数的基础上，按照风险状况进行分类，绘制风险图谱，明确任务清单。 （一）已出险机构。指出现出借人资金无法正常兑付或其他重大风险隐患，风险已经暴露，已不能正常运营的网贷机构，按照公安部门是否立案分为两类： 1．已立案机构。既包括公安部门接收案件后，经审查认为有犯罪事实需要追究刑事贵任，予以立案的机构；也包括对于公民报案或者犯罪嫌疑人自动投案，公安部门已接受的涉事机构。 2．未立案机构。根据出险后是否配合政府有关部门开展风险处置工作，分为两类： （1）恶意退出类机构，包括实际控制人、高管失联跑路，或虽未失联跑路但不配合当地政府进行风险处置的机构。（2）主动清退类机构，指已对外发布退出公告，且能在当地政府监督下有序开展风险处置的机构。 （二）未出险机构。按照存量业务规模进行分类： 1．僵尸类机构。指待偿余额或新业务发生额超过三个月为零，关闭发标、投标功能或者相应功能运转不正常等可实质性被认定为非正常运营的机构。2．规模较小机构。各省根据辖内实际情况，综合待偿金额和出借人数等因素确定。3．规模较大机构。根据风险状况进行分类：（1）高风险机构。符合以下特征之一的，列入为高风险机构：存在自融、假标，或者资金流向不明的；项目逾期金额占比超过10％的；负面輿情和信访较多的；拒绝、怠于配合整治要求的；合规检查发现存在“一票否决”事项的。 （2）正常机构。指暂未发现具有高风险机构特征的机构。 三、分类处置指引 （一）已立案机构处置指引 工作目标：提高追赃挽损水平，稳控投资者情绪。 1．与当地公安部门紧密配合，掌握机构追赃挽损进度。 2．与当地信访部门紧密合作，做好群众安抚和信访接待工作。 3．及时公告机构信息，并做好网络輿情管控，尤其是对自媒体與情做好监测。 （二）已出险未立机构处置指引 工作目标：平稳有序处置风险，不发生群体性事件。 1．当地政府成立风险处置专项小组，落实督导出险机构的回应维权诉求、风险化解和处置职责。建立线上线下沟通投诉机制，将上访人员稳控在当地，确保不串访。2．对于失联跑路以及不配合当地政府进行风险处置的机构，及时将相关线索移送当地处置非法集资工作机制或公安部门。3．压实机构责任，加强人员管控和重点盯防，要求机构实际控制人、高管入员承诺“六不”（不跑路、不关停、不变更地址和主要股东、不随意处置资产、不损坏资料、不新增业务），主动与投资人沟通；监督机构制定兑付方案并实施，明确实质性退出时间点。4．协调金融机构管控机构账户以及实际控制人、高管人员的个人资金账户，防止投资人资金被非法向境外转移或转入个人及关联机构账户。5．坚决打击恶意逃废债行为，进一步理失信借款人信息，完善数据精准度并及时上报，按既定程序纳入征信系统。6．对接资产管理公司等机构，探索通过资产管理公司购买资产、并购重组、托管清收等手段化解网贷风险。7．提前部暑维稳工作，密切跟踪机构退出进展，无法实现良性退出的，及时移送处置非法集资工作机制或公安部门。 （三）僵尸类机构处置指引 工作目标：尽快推动机构主体退出 1．将僵尸类机构名单对外公告，要求其限期办理工商登记注销，关闭网站或移动互联网应用程序（简称APP）。 2．公告期结東，未出现投资者主张存量债权的，由各省网贷整治办出具意见，移送市场监管部门列入异常经营名录，依法提请吊销营业执照，协调网信部门、电信主管部门关闭网站、下架APP。 （四）在营规模校小机构处置指引 工作目标：坚决推动市场出清，引导无风险退出。 1．逐个约谈机构实际控制人、高管，讲明要求其限期退出的相关政策和时间要求。 2．对于不愿主动退出的机构，通过合规检查，严查其违法违规行为；发现严重违法违规行为的，立即移送处置非法集资工作机制或公安部门，同时将其实际控制人和高管人员列入涉金融领城黑名单。 3．要求机构制定遇出计划，严格执行“双降”要求，在存量业务清零前，定期向网安中心数据报送管理系统填报数据。 （五）在营高风险机构管控指引 工作目标：稳妥推动市场出清，努力实现良性通出。 1．通过合规检查和资金监测分析，评估风险状况，掌握机构主要违法违规行为的证据。人民银行分支机构、银保监局协调商业银行、第三方支付机构对机构资金流向进行查询，重点关注自融、假标和资金流向异常等行为；涉及到跨省查询的，由人民银行分支机构负责跨省协调。 2．约谈机构实际控制人及高管，讲明要求其退出的政策要求，督促其朝定退出计划并开展压力测试，压实股东责任。 3．确定专人负责高风险机构风险管控工作，定期约谈机构实际控制人、高管人员，记录相关人员联系方式、常住地址，熟悉机构业务情况，掌握主要风险点。制定机构风险应急预案，定期备份机构业务数据，收集投资人和借款人名单。 4．严格管控存量规模和投资人数，执行“双降”要求，定期向网安中心数据报送管理系统填报数据，执行资产分布穿透检查，避免发生机构通过发布度假标的用出借人资金将资金投向房地产、股市等情况。 5．严格防范风险向持牌金融机构传导蔓延，严格执行“四不准”要求，即金融机构不准通过网贷机构融资、不准为网贷机构提供担保增信、不准接受网贷机构投资、不准销售网贷机构产品。 6．对于资金缺口过大、“双降”要求落实不力、拒绝或息于配合整治要求机构，及时移送处置非法集资工作机制或公安部门 7．设置高风险机构情监测关词，做好网络情监测，避免自媒体散布不实言论，引发公众恐慌情绪。 （六）正常运营机构工作指引 工作目标：坚决清理造法造规业务，不留风险隐患。 1．开展合规检查，对检查中发现的问题，督促机构认真落实边查边整、即查即改。 2．严格管控存量规模和投资人数，执行“双降”要求，定期向网安中心数据报送管理系统填报数据。 3．督促机构开展集中信息披露，强化对网贷机构的社会监督。 4．资金存管银行要加强对网贷资金交易流转环节的监督管理，防范网贷资金用风险；发现相关风险线索，及时报告监管部门。 5．定期评估机构风险状况，根据风险变化情况及时对机构分类进行调整。 6．积极引导部分机构转型为网络小货公司、助贷机构或为持牌资产管理机构导流等。 四、有关要求 （一）名单制管理。网贷机构整治名单已锁定为网安中心数据报送管理系统中录入的机构，对于系统内未正常报数的网贷机构以及系统名单外的机构，各省网贷整治办要立即移送当地处置非法集资工作机制进行处置。各省网贷整治办应加强网安中心数据报送管理系统中的信息维护，对每家网贷机构进行分类标识，在机构分类变化时及时更新机构状态。 （二）集中信息披露工作要求。各省网货整治办负责本地区网贷机构集中信息披露工作组织实施，确定集中信按露机构名单。对于中互金协会会员机构，由各省网贷整治办和中互金协会共同督促其继续在全国互联网金融登记服务平台进行信息披；不是中互金协会会员的机构，各省网贷整治办可指定在本地协会或有关部门已建成的平合进行集中信息披算，或委托中互金协会开展集中信患披露，相关工作应于2019年3月底前完成。","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"互金","slug":"互金","permalink":"http://yankaili2006.github.io/tags/%E4%BA%92%E9%87%91/"},{"name":"消费金融","slug":"消费金融","permalink":"http://yankaili2006.github.io/tags/%E6%B6%88%E8%B4%B9%E9%87%91%E8%9E%8D/"},{"name":"P2P","slug":"P2P","permalink":"http://yankaili2006.github.io/tags/P2P/"}]},{"title":"Bancor协议：通过智能合约为加密货币提供持续流动性","slug":"公众号-一聪财经/Bancor协议：通过智能合约为加密货币提供持续流动性","date":"2021-03-05T02:51:50.116Z","updated":"2021-03-05T02:51:50.117Z","comments":true,"path":"2021/03/05/公众号-一聪财经/Bancor协议：通过智能合约为加密货币提供持续流动性/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/%E5%85%AC%E4%BC%97%E5%8F%B7-%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/Bancor%E5%8D%8F%E8%AE%AE%EF%BC%9A%E9%80%9A%E8%BF%87%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E4%B8%BA%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E6%8F%90%E4%BE%9B%E6%8C%81%E7%BB%AD%E6%B5%81%E5%8A%A8%E6%80%A7/","excerpt":"","text":"Bancor协议：通过智能合约为加密货币提供持续流动性推荐评论：在经济学中的资产交易领域有一个经典问题叫做“双重需求巧合”，结合虚拟货币的特点，Bancor将准备金制度引入到货币发行领域，智能合约作为交易对手方，从而将传统意义上的“交易”和流动性隔离开来。当其他去中心化还在着力解决中心化交易所的不足时（例如资金安全、流动性共享、数据透明与监管等），Bancor在创新上迈出了一大步，它提出的一些观点也值得深入思考和探讨，例如流动性网络的连接、价格形成和发现机制、滑点的微积分处理、虚拟货币领域的长尾理论等。EOS的RAM市场采用Bancor改进算法实现，可见BM对这个算法的认可。Bancor是以色列的创业团队发起的。 摘要Bancor协议为基于智能合约的代币，提供了一种自动化价格形成机制和持续的流动性机制。这些智能代币拥有至少一个连接器，连接器持有其他代币作为准备金。通过智能合约，用户随时可以完成智能代币和连接器代币的互相兑换，兑换的价格由智能合约根据买卖量自动计算得出。 1 介绍1.1 背景在我们生活的世界，任何人可以自由地发表文章、发起讨论组、运营电商等。互联网的低门槛，使得用户创作内容和草根参与成为互联网时代本质特征。几个世纪以来，人类社会发行和流通的有价代币有钞票、债券、股票、礼品卡、积分、社区货币等等。2009年，比特币[1]引入了基于密码学共识的去中心化数字货币的概念，随后出现了一波新的数字资产，即加密货币，通俗地称为代币。 代币可以用作服务的使用权、众筹项目中贡献量的证明、分布式应用中的激励、代表某种金融权利、内部流动货币、实物资产的所有权证明等等。代币通常通过智能合约向大众发行，称作发币。智能合约只是一段计算机程序，上链之后，只要底层区块链稳定运行，它可以永久地保持不变地运行。智能合约拥有许多与常规区块链用户相同的功能，例如可以调用其他智能合约，可以对代币进行托管。一个设计优秀的智能合约可以被视为一个可靠、廉洁、完全自动化的中间人。这使得智能合约特别适合于代币的发行和治理这一机械而敏感的任务。 1.2 价值互联网和流动性尽管代币具有不同的特征和用途，所有代币都抽象地表示某种经济价值。兑换代币逐渐成为世界各地代币所有者日常业务的一部分，从而形成了全球价值互联网。现在价值的连接是通过交易者互相交易的方式实现的，他们可以直接兑换，或者通过三方服务如交易所兑换。 不同于网络交换机之间的可以永远传输数据的电缆，这种通过交易建立的连接是短暂的，这意味着买卖双方必须在合适的时间和地点（虚拟的）同时出现，代币交易才能完成，从而实现价值的传递。要始终在买卖方之间找到匹配，是经济学的一个问题，称为“需求的双重巧合”问题[2]。为了使代币有效地参与全球代币经济（即价值互联网），它的交易量必须跨越一个关键的障碍，即买卖双方之间的匹配变得足够频繁，从而变得可靠。这种交易的可靠性被称为流动性。我们说一种代币具有流动性，是指可以很容易地买卖它，而不会对它的价格产生很大的影响。尽管流动性对最广泛使用的代币来说不是问题，对于购买和出售小规模代币（例如在小众的分布式应用dapps或在本地社区中使用的代币）或仍然很少采用的新代币来说，这是一个重大的障碍。 就像某些人无法访问互联网一样，因为他们住在偏远的地方，提供联网服务无利可图，大量的代币所有者（以及潜在的代币创建者）不能共享价值互联网，因为他们拥有的非流动代币没有足够的“链接”连接到更大的被认为流动的、可以可靠地使用的代币经济体。 在传统的金融市场中，做市商解决这一流动性问题的方法是，即使市场上某金融资产的利息很低，仍然始终提供买卖该资产的报价单。这些通常是大型金融机构，能利用其庞大的资本储备，在市场流动性不足的情况下创造利润，并能够承受严重的流动性不足的风险。他们通过向买卖双方报出不同的价格从而赚取其中差价（称为差价）来获利。 在区块链领域，利用传统的做市商机制来解决流动性问题，不仅违背了该运动去中心化的精神，也将造成在新代币经济中主要资本持有者的金融权力的过度集中。 1.3 长尾现象今天，市值排名前10%的代币，占了整个代币市场95%的市值，占所有交易量的99%（基于对CoinMarketCap上列出的1000多个代币的分析）。尾部（即剩下的90%）的代币实际上无关紧要。这与许多其他在线生态系统形成了鲜明的对比，在这些生态系统中，尾部逐渐占据了总量的很大一部分，这种现象被称为长尾现象[3]。例如，在普通书店销量很小的小众书籍，占亚马逊[4]书籍总销量的大约30%到40%。一旦消除了形成长尾的障碍，长尾的形成就开始了。YouTube使上传和观看视频变得简单。博客平台让人们更容易发布他们的文章。创造一个流动性代币的简单方式，是用户创造的货币出现长尾的障碍。 1.4 Bancor流动性网络在这篇白皮书中，我们提出了Bancor网络的分布式流动性，基于Bancor协议，利用智能合约直接将流动性构建为代币本身。这类代币我们称之为智能代币，总是可以通过它们的智能合约直接购买和出售。换句话说，代币的管理系统总是向买家出售代币，并从卖家买回代币。每个智能代币都有一个或多个连接器，它们将智能代币连接到网络中的其他代币。这些连接器持有另一个代币作为准备金，从而在智能代币和它的连接器持有的代币之间建立关系。智能代币连接器使用一个公式（下面详细说明）来建立智能代币和它的连接代币之间的价格关系。连接器保证金用于以算法计算的价格为智能代币和其连接任何代币提供流动性。 所有智能代币都是与ERC20兼容的代币，这意味着它们的功能与任何支持现行标准ETH代币的系统或服务是兼容的和一致的。智能代币标准的结果是一个不断连接的价值互联网，因为每个代币都自动地维护与代币经济其余部分的流动性链接。通过提出一种现代的、高效的、自动化的解决流动性不足问题的解决方案，我们相信Bancor协议可以成为一种支持用户创造代币的长尾技术，因此，为数以百万计的小规模、用户创造的货币的多样化经济铺平了道路。这种多货币模式是可以扩展的和分布式的。 2 智能代币2.1 非盈利的自动化做市商智能代币是Bancor协议的核心。它们的运作类似于常规代币，在ETH区块链[6]上使用的符合ERC20标准[5]，但也要包含额外的逻辑，即允许用户通过它的智能合约直接购买和出售代币，价格通过程序自动调整以反映供求关系。实际上，智能代币拥有一种内置的流动性机制，确保它们可以持续地为兑换为其他代币。 为了实现这一点，每个智能代币都配置了连接器模块，这些模块持有它连接的另一个代币作为准备金（例如，BNT智能代币有一个连接到ETH的连接器，它持有ETH作为准备金）。购买者可以使用任何连接的代币来购买智能代币，将其发送到智能代币的合约中，然后合约将它们添加到连接器的准备金中，并返回新的智能代币，这些新代币将自动发送回买方。换句话说，任何人都可以通过将一定数量的连接代币存入智能合约来购买智能代币。在这种情况下，新智能代币发行出来，智能代币的连接器准备金和智能代币的供应量都增加了。类似地，卖方可以向智能合约发送一定数量的智能代币，然后合约将这些智能代币从流通中移除，并从连接器准备经中提取相应数量的连接代币，并将它们发送给卖方。在这种情况下，连接器准备金和智能代币的供应都减少了。为了知道发行给买方的数量和卖方提取的数量，智能代币根据供求关系，不断重新计算它相对于每个连接代币的价格。Bancor公式（详细说明如下）通过在智能代币的市值和它的连接器准备金之间保持一个固定的比率（在下面讨论权重）来实现这一点。智能代币的适应性供应（回想一下，它是在购买时发行新的，在出售时从流通中移除）是独特的，使供应量能够根据需求调整（不影响单位价格），并使智能代币是持续可以购买的。在未来，Bancor协议还将使用传统的固定供应量来标准化智能代币配置。 虽然允许代币发行和移除自己（增加和收缩供应量）可能听起来不太靠谱，但是这个逻辑通过软件运行在一个不可变的区块链上的透明的（可公开查看的）智能合约中。此外，只有某个连接器（通过购买）的代币准备金增加时，智能代币的供应量才会以编程方式增加，从而确保智能代币总是与另一个代币的市值以一定比例关联，从而防止不可预料的通货膨胀。 目前，智能代币可以通过其智能合约，在其连接器中持有ERC20代币的准备金，从而连接到任何符合ERC20代币。这使得Bancor协议向后兼容了现有的大部分代币。将来，计划对智能代币进行升级，以便跨各种区块链连接代币。 实际上，智能代币扮演着完全自动化的和分布式的做市商的角色，通过在基于区块链的网络架构中操作，可以实现有效的、自主的代币兑换通道，并且不依赖于现有的人工的（例如手工提交）交易方式及随之而来的逐利动机。 2.2 连接权重如上所述,连接器的权重代表智能代币的总价值（其供应量*单价）和连接器的准备金之间的一个固定比率。智能代币的创建者为每个连接器定义所期望的比率。当连接器准备金和智能代币的总价值（有时被称为“市值”）随着买卖而波动时，Bancor公式保持这个比率是固定不变的。因为每次购买或出售智能代币都会导致连接器准备金和智能代币的增加或减少，为了保持连接器权重恒定不变，即创建者配置的比率，智能代币的价格相对于连接代币的价格将会被不停地重新计算。这个比率决定了一个智能代币的价格需要调整多少，才能使得这个比率在每笔交易中保持不变，换句话说，就是价格敏感性。连接器准备金和智能代币之间的比率越高，价格敏感度就越低，这意味着每次买卖都会对智能代币的价格走势产生相对较弱的影响。连接器准备金和智能代币之间的比率越低，价格敏感度就越高，这意味着每次买卖都会对智能代币的价格走势产生相对较大的影响。可以说，较高的权重会导致智能代币相对于连接代币的价格相对稳定，较低的权重会导致智能代币的相对于连接代币的价格相对波动。第3节进一步阐述了定价算法，并根据智能代币的期望性质选择连接器权重。 智能代币连接器可以被视为分布式、自主、透明和可预测的做市商，而不是交易所。智能代币通过程序自动调整它们的价格，来管理它们的连接器准备金，以保持它们与智能代币的总市值之间的比率是恒定的。 由于他们的逻辑是透明且不可变的，购买或者出售代币导致的价格变化是可以预测的，最终导致了更稳定的代币价格。这种公式化的机制使智能代币成为调整供求关系的可靠中介。 2.3 代币网络智能代币可以实现自己和它们的连接代币之间进行即时兑换。这个功能足以使智能代币即时兑换为一定数量的以类似的方式连接到同一网络的任何其他代币。换句话说，智能代币可以立即通过网络兑换为它的任何一个连接代币，也可以兑换为到它的任何一个连接代币的连接代币，以此类推。 例如，假设一个智能代币ABCCoin有一个连接器，该连接器持有XYZCoin作为准备金。此外，假设另一个智能代币NEWCoin也有一个连接器，该连接器持有XYZCoin作为准备金。这样，一个用户可以首先将ABCCoin兑换成XYZCoin，然后将XYZCoin兑换成NEWCoin，从而将ABCCoin兑换为NEWCoin。用户只需要一个操作，这可以在后台无缝地完成。 此外，NEWCoin本身可能会连接到其他代币，从而扩展了连接范围。通过这种方式，智能代币可以连接到无限数量的代币，从而创建一个分布式的流动性网络，该网络可能由数百万个代币组成，这些代币都可以以不断计算的价格自动地相互兑换。 3 定价算法3.1 价格公式Bancor算法定价公式对于系统的设计和潜力至关重要，因为它使智能代币的价格是可靠的和可预测的，这对于代币的大规模使用是至关重要的。它建立在前一节中介绍思想上，即智能代币保持其总市值（总供给×单价）和其连接器的准备金的比率是一个恒定值。我们称这个比率为连接器权重，简称为CW。 12CW &#x3D; \\frac &#123;connector \\quad balance&#125; &#123;Smart \\quad Token&#39;s \\quad total \\quad value&#125; 智能代币的总价值，即它的市值，是指以当前价格出售全部代币（整个智能代币供应量）所能获得的金额。智能代币的价格以连接代币表示（例如，BNT的价格以其连接代币ETH表示）。 12&#123;Smart \\quad Token&#39;s \\quad total \\quad value&#125; &#x3D; &#123;price&#125; × &#123;Smart \\quad Token \\quad supply&#125; 这些关系是Bancor定价算法的关键，因为它们使得系统将智能代币的价格作为其CW、连接器准备金和智能代币供应量的函数进行代数求解。 12&#123;price&#125; &#x3D; \\frac &#123;connector \\quad balance&#125; &#123; &#123;Smart \\quad Token&#39;s \\quad outstanding \\quad supply&#125; × CW&#125; 在任何给定的时间,每个连接器总会准确无误地记录准备金余额和智能代币的供应量，所以它只需要知道CW就可以不断计算智能代币的即时价格,即使其连接器准备金会不断变化（与买卖以及连接代币价格波动联动），同时供应量也会总是变化（当买卖发生时，通过存入或者提取连接器保证金）。CW表示为大于0%和高达100%的百分比，如前所述，最初是由创建者在配置智能代币时设置的。为CW选择的值对代币的定价有重要的影响，也可以根据智能代币的设置进行更改。 3.2 不同连接器权重与供需关系图1显示了智能代币的价格，对CW的不同值的变化。我们简要讨论一下插图案例： （a）第一种情况是CW = 100％，在这种情况下，不管需求如何变化，智能代币的价格完全跟随于连接代币准备金的变化，两者的相对值不会发生变化。价格实际上与其连接代币的准备金挂钩，智能代币成为该值的一种代理。这可以比作金本位，一种货币制度，发行机构承诺将货币兑换成一定数量的黄金。例如，直到1971年，美元一直以每盎司35美元的汇率盯住黄金。 （b）第二个线性情况是CW = 50％，其中智能代币价格随供应量线性移动（随着连接器准备金而增长或收缩）。 当智能代币的需求较低时（即当出售量大于购买量时），智能代币价格会下降;当需求量较高时（即当购买量大于出售量时），智能代币价格会上涨。这种关系是供求关系的典型运作方式，唯一的例外是，智能货币的供应不是固定的，而是由需求决定的，而且在价格上涨时也不会稀释单位价格。 （C）第三个非线性的例子是，CW在0%到50%之间，这显示了价格和供给之间的相似增长关系，但是随着供给的增加，价格曲线增长得更加迅猛。图表显示了CW = 10%的特定价格曲线。低于10%的CW会比这个反应更强烈（更尖锐的指数曲线），而高于10%的CW会随着接近50%而相对地趋于线性（b）。 （D）最后一种非线性情况，CW在50％到100％之间，其中价格和供应之间的增长关系曲线增长力度不及（b），这意味着智能代币的价格对供应变化的反应越来越少，直到达到我们在（a）中看到的持平的100％关系。具体图表显示了CW = 90％的价格曲线。 从理论上讲，智能代币也可能具有大于100％的CW，但是，这是代币随着需求增加而变得更便宜的特定情况，并且超出了本讨论的范围。 3.3 处理价格滑点在上面，我们开发了在任何给定时间点确定智能代币价格的公式。但正如图表所示，当购买或出售智能代币（从而增加或减少它们的供应）时，它们的价格会变动!事实上，即使是最微小的交易，也会将智能代币的价格提升到一个新的水平，这意味着，如果买家将自己的订单分成许多小的交易，那么她将获得不同的价格。要解决这个问题，当需要计算实际的兑换价格时，我们以收到的一定数量的代币（可以是买方的连接代币或者买方的智能代币），计算智能合约应该返回给买方（以新发行的智能代币形式）或者卖方（以从准备金中提取的连接代币的形式）的代币数量。 123&#123;tokens \\quad issued&#125; &#x3D; &#123;supply&#125; × \\left(\\left(1 + \\frac &#123;connected \\quad tokens \\quad paid&#125;&#123;balance&#125;\\right)^&#123;CW&#125; - 1 \\right) 这个公式通过将一个交易视为许多无限小的交易的结果演算而来，每个交易影响智能代币的供应量和连接器的准备金，从而累加每个价格增量导致了的新价格。给定的交易规模的实际价格是交易规模的每一个无限小增量对价格产生相对影响后的最终价格。这里有一个正式的数学证明。该公式对于买卖订单都是类似的，其中我们推导出要向买家发行的智能代币的实际数量，或者智能合约收到一定数量的智能代币后从连接器准备金（卖方）中提取代币数量。 12&#123;connected \\quad tokens \\quad paid \\quad out&#125; &#x3D; &#123;balance&#125; × \\left(\\sqrt[CW]&#123;\\left(1 + \\frac &#123;tokens \\quad destroyed&#125;&#123;supply&#125;\\right)&#125; - 1 \\right) 我们现在可以使用一个交易中每个连接代币可兑换的智能代币的数量来计算有效价格，即智能代币相对连接代币的价格。有效的价格对不同的大小的交易和不同的连接器代币（多个连接器的情况）是不同的。 12&#123;effective \\quad price&#125; &#x3D; \\frac &#123;connected \\quad tokens \\quad exchanged&#125; &#123;smart \\quad tokens \\quad exchanged&#125; 有效价格具有可以预期的性质，即10个小的交易或1个累积金额相同的大的交易，成本是完全相同的。 3.4 价格举例举一个例子，智能代币目前的发行量是1000枚，连接代币准备金是250枚，CW是50%。智能代币和连接代币的兑换价格如下： 12price &#x3D; \\frac &#123;250&#125;&#123;1000 × 50\\%&#125; &#x3D; 0.5 假设买方花费10枚连接代币，他将得到多少枚智能代币呢？ 12tokens \\quad issued &#x3D; 1000 × \\left( \\left( 1 + \\frac &#123;10&#125;&#123;250&#125;\\right)^&#123;50\\%&#125; -1 \\right) \\approx 19.8 我们兑换10枚连接代币，根据得到的智能代币数量，我们可以演算出有效价格。 12effective \\quad price &#x3D; \\frac &#123;10&#125;&#123;19.8&#125; \\approx 0.5051 请注意，有效报价与报价不同，在本例中略高一些。这种差异是由于上一节解释的特定规模交易的价格划点造成的。换句话说，通过增加连接器准备金和智能代币供应量，10个代币中的每个无限小的增量单位都将导致价格上涨的压力。实际上，买家已经为自己的交易导致的价格下滑付出了代价。在将代币发送到智能合约之前，买方可以执行这些计算，从而准确地估计兑换将如何根据它的兑换而变化。价格滑点的可预测性和一致性是Bancor公式的关键优势。 3.5 异步流动性当智能代币处理兑换时，价格将在买卖量之间趋于均衡。在经典的交易模型中，为了实现买方双方的互相匹配，必须要有足够的流动性，这样买卖订单在任何时候都可以可靠地匹配上。Bancor协议没有这样的要求，因为智能代币总是通过连接器准备金来完成买卖兑换操作，因此从时间上看，价格计算是连续的。针对每笔交易的价格计算是独立的（当买方和卖方匹配时），智能代币的每次兑换都会逐步并直接影响其价格。这使得Bancor的价格形成机制是真正异步的。 3.6 通过套利平衡价格智能代币也可以在不同的交易所进行交易，在这些交易所，它们的市场价格可能与智能代币的报价存在差异。由于智能代币合约没有观察和引入外部世界价格的功能，因此智能代币的价格可能存在碎片化的风险。但是，这种情况不太可能持续很久，因为它构成了一个明显的套利机会。例如，如果市场价格高于智能代币的报价，任何人都可以从智能合中购买并在市场上出售，直到价格持平。套利能力有效地激励市场参与者在智能代币和外部价格之间建立价格共识。 同样值得注意的是，只有在直接与智能代币合约交互时，才会存在发行新代币和增加智能代币供应量的功能（当连接的代币准备金增加）。在外部交易所上市、买卖或直接在人与人之间转账代币，不会触发此功能，而是使得现有代币流动起来。尽管如此，由于上述套利机制，现有流通中代币的价格将对智能代币报价产生影响。 4 智能代币的优点智能代币是代币市场的一种新范式，因为它们结合了自动化和分散的代理，不知疲倦地以反映数学的供求关系的价格填写转换订单，并实时适应转换大小。这比传统的基于交易的交易有很多优势: 智能代币是代币市场上新的范例，因为它们结合了自动化和分布式代理，能够以反映数学的供需的、实时适应于兑换数量的价格不断填写兑换订单。与传统的基于交易的兑换相比，这带来了许多优势。 持续的流动性 即使市场上只有很少或没有其他买家或卖家，用户可以通过智能合约直接在网络中购买或出售代币。由于价格会根据兑换规模进行调整，因此总会形成一定的兑换价格。Bancor协议有效地使得流动性与交易量不再关联。 无内置费用 默认情况下，智能代币合约不会对执行的兑换收取费用。用户产生的唯一费用是与底层区块链（例如，以太坊上的GAS）进行交互所需的费用。虽然智能代币创建者可以为某些智能代币的兑换设置可选的使用费（称为贡献），但这些费用可能会非常低，因为Bancor协议的开源特性，其他用户轻松创建相互竞争的智能代币来提供相似的兑换服务，并收取更少的费用。Bancor协议不需要对兑换收费来获取营业利润，而是随着代币网络的扩大和用户数量的增长，从被广泛使用后获益。 可调节的价格敏感度 大额的连接器代币准备金和比较高的CW，产生的杠杆作用，使得智能代币的价格对短期投机或大订单引起的突然波动不太敏感。例如，具有10％CW的智能代币与具有等于代币的整个市值的10％的订单簿的交易所敏感程度相当。可以通过CW和连接器准备金调整此灵敏度，以达到想要的智能代币的表现。 没有价差 在处理买入和卖出订单时，Bancor公式使用相同的价格计算方法。这与购买价格始终低于卖出价格的传统交易所形成对比。买入和卖出价格之间的差异，即差价，是传统做市商赚取的利润。如上所述，Bancor协议不需要这种利润以维持运营，并且可以引入分散的利差以鼓励采用bancor网络，使所有参与者受益。 价格可预测 智能代币的价格算法是完全透明的，允许用户在执行兑换之前预先计算其兑换的有效价格。这与传统的基于订单簿的交易形成对比，其中大订单可能导致价格无法预测地滑落到显着不同的水平。 基于ERC20 智能代币是符合ERC2标准的代币（虽然具有额外的功能），可与现有代币应用程序（如钱包或Dapps）无缝集成，因为它们符合流行的ERC20代币标准。此外，任何现有的ERC20标准代币都可以通过带有两个连接器的智能代币连接到Bancor网络，使Bancor协议向后兼容现有的ERC20代币。我们在下面的第6部分详细介绍了各种智能代币配置。 5 智能代币的用例和含义我们相信Bancor协议的独特属性使其对各种用例具有吸引力，这些用例包括为现有代币提供更可靠的交易基础设施，促进小型代币的长尾，以及实现全新形式 创新的代币市场举措。在以下部分中，我们将更深入地探讨一些问题。 5.1 更具可扩展性和可靠性的代币市场提供了分布式流动性的Bancor代币网络可以用作中心化交易所的替代方案，对于连接到这个网络的代币具有许多积极影响。例如，具有两个连接器的智能代币，其总CW恰好为100%，其功能类似于分布式代币兑换币对。我们将这种智能代币称为中继代币。（我们将在后续章节中详细说明这个和其他独特的智能代币配置。）中继代币允许用户在两个连接代币之间互相兑换，通过两步操作实现，即购买一种代币，立即出售另外一种代币。基于定价算法，这将导致中继代币的价格相对于第一个连接代币（由于购买）而上升，并且相对于第二个连接代币下降（由于出售），完全符合预期。如前所述，中继代币相对于连接代币的报价不太可能与外部交易所的价格长期存在显着差异，因为套利机会激励套利者缩小其中的价差。这种特殊的智能代币配置允许不符合Bancor协议（即没有连接器）的现有标准代币变得向后兼容（即，可以通过中继代币自动兑换网络中的任何代币），从而增加Bancor流动性网络的可行性和连接能力。 此外，当通过智能代币兑换代币时，用户不直接与交易对手打交道，也不需要将代币存入交易所，从而降低了被黑客劫持或者交易所业务模式导致延时的风险。这与MtGox和Bitfinex（作为示例）所经历的痛苦形成了鲜明的对比，包括用户账户被盗取了价值数亿美元的加密货币，以及代币无法及时从交易所提现。 通过在一个分布式的、自主的和低成本的网络中汇总流动性，用户可以从当今互相割裂的以营利为目的的交易所环境中获得更大、持续的流动性和相对价格稳定性。 5.2 小规模代币的长尾现象智能代币为流动性问题提供了一种创新的解决方案，可以防止小规模代币或新代币出现长尾现象（参见第1节）。 回想一下，缺乏足够数量的买家和卖家意味着目前存在的绝大多数代币几乎没有任何波动。尽管小规模代币具有许多实际产业用例，例如众筹，本地商务，社区协作等。 例如，音乐家通过可以发行代币，并且承诺发行的专辑只能以该代币购买，来筹集资金。她可以发起众筹活动，她根据捐款的大小向支持者发放代币。在活动期间贡献1％捐款的支持者将获得1％的可用代币。如果专辑成功，则对此代币的需求将会增加。 等到专辑发行的时候，代币的波动已经平缓了，初始支持者很少愿意出售其持有的代币。在今天的小规模代币流动性不足的市场中，对这张专辑感兴趣的人很可能无法购买到所需的代币来购买专辑。由于Bancor智能代币随时都可以买卖，潜在的专辑买家通过它可以随时获得所需的代币，价格根据当前的买卖量通过数学计算得出。尽管买家能够从合约中购买智能代币，而不是仅从卖家那里购买智能代币，现有的智能代币所有者不会错过，因为当计算出来的价格对他们来说很有吸引力的时候，他们反过来可以将智能代币卖回智能代币合约。这突出了Bancor协议的真正的异步流动性性质。 还有许多其他小项目的例子，可以从用户用户创造的代币中收益，包括激励人们参与到本地社区的社区代币，以及用户优先使用有效资源（如计算能力）的平台代币等。事实上，随着智能代币的使用促进了成千上万的不同代币的长尾的兴起，我们肯定会见证许多或大或小的用户创造的代币的新颖应用。今天，所有这些潜在的创新都被缺乏自主的和异步的流动性所扼杀，这实际上是一个先有鸡还是先有蛋的困局，代币创造者需要预先确保一定的交易量，以便为初期支持者的交易活动提供足够的流动性。 5.3 实现全新的代币应用智能代币不仅可以帮助解决当前的问题，包括安全代币兑换、初始发行和连续流动性问题，还可以在新兴的区块链世界中实现全新的应用。 考虑一个智能代币作为代币组合的例子，它持有多个连接器，这些连接器的CW综合为100％，它可以有效跟踪给定（和用户配置的）其他代币集合的加权平均结果。套利者可以确保智能代币的价格与外部市场同步，这意味着智能代币的价值将始终是最新的。这些智能代币使用户不需要通过中间金融服务机构，就能够直接持有此类组合代币。 另一个例子可能是分布式应用的智能合约需要有关代币价格的信息。这通常依赖于可信的第三方将信息转发到区块链上，但是使用Bancor协议，这些智能合约可以直接从智能代币合约查询当前价格。智能代币充当了链上价格预告，从而无需从外部输入。 类似的，现在不依赖于第三方，即可互相交换服务（由代币表示）的分布式应用成为可能。例如，通过使用Bancor的兑换机制，将两个使用不同代币支付的不同服务集成到一起是可能的。 这些只是我们发现的新模型中的一些例子，因为随着流动性障碍和其他障碍减少或者消失，例如发行代币的技术难度，长尾代币将会涌现。 6 智能代币配置随着新的配置不停出现，智能代币出现了多种类别：带有一个连接器、两个连接器或者两个以上连接器的智能代币；总连接器CW权重为100%或低于100%的智能代币；带有一个未激活连接器的智能代币。虽然所有智能代币共享某些属性，但任何这些配置的组合都具有一些不同的属性。 具有组合连接器总权重低于100%（更典型的低于20%）的智能代币成为流动性代币。可能有一个或者多个连接器。例如，BTN具有单个权重为10%的ETH连接器。流动性代币可以使用连接器代币买卖（使用Bancor公式计算它相对于连接代币的价格），并且可以自适应调节供应量，在购买时增加，出售时减少。 总连接器权重为100%的智能代币可以有一个、两个或者多个连接器。具有一个连接器占100%权重的智能代币称为代理代币；具有两个连接器权重为100%的智能代币称为中继代币；具有三个或者更多连接器权重为100%的智能代币称为组合代币。可以使用任何一个连接器代币买卖代理、中继和组合代币（使用Bancor公式计算它们相对于连接器代币的价格）。并且可以自适应地调整供应量，在购买时增加，出售时减少。代理、中继和组合代币中的连接代币，可以是其他智能代币，或者固定发行量的ERC20代币，这使得现有的ERC20代币向后兼容Bancor网络。 具有单个尚未激活连接器的智能代币（当前连接器准备金为0），被称为糖果代币。可以向早起持有者（例如社区支持者）发放将来会发行的代币。未来，存放连接器保证金，糖果代币将转变为流动性代币，并且可以兑换为连接代币。 由多个智能代币持有作为连接代币的智能代币，称为网络代币（详见第8节）。 例如，由于许多智能代币在其连接器中持有BNT以便与Bancor网络集成，因此BNT可称为网络代币。它同时也是一个流动性代币。 7 Bancor生态系统Bancor网络提供分布式流动性成功与否，取决于各种类型不同用户的参与。我们将简要概述参与者在Bancor生态系统中可以发挥的关键作用。 交易者 持有、兑换和支付智能代币的终端用户 智能代币发行者 发行智能代币，配置初始供应量、价格、连接器权重CW和管理智能代币初始发行的人员、公司、社区、组织或基金会。还包括将现有ERC20代币连接到Bancor网络的中继代币的创建者。 资产代币化者 将代理代币或者组合代币映射到实体资产或者其他区块链上代币的创建者。这允许智能代币连接到更广泛的资产，如比特币、法定货币、黄金或其他新兴的区块链代币。 套利者 监控Bancor流动性网络与外部交易所或者其他智能代币的价格，并且通过套利消除价差的交易者。套利者通过消除价差获得奖励，因此是Bancor生态系统的重要参与者。有关Bancor协议中套利机制的进一步说明，请参见第3.6节。 8 Bancor网络代币8.1 网络代币在2.3节中，我们描述了具有两个连接器的中继代币如何允许一个连接的代币兑换为另一个连接的代币，通过两个步骤：使用一种连接器代币购买中继代币，并将中继代币出售给另一个，以换取另一种连接器代币。如上所述，这个两个步骤将允许网络中的任何代币可以兑换为任何其他代币，只要它们在任意远的距离上具有至少一个共同的连接连接。我们将公共连接代币称为网络代币，因为它将许多不同的智能代币连接在一起形成一个代币网络。 根据本文所述的Bancor公式自动化价格机制，网络代币使其网络中的所有智能代币互相可兑换，充当“代币的代币”。在这样的网络中，任何代币购买量的增加，都会导致网络代币的增加（因为子代币的增加是通过网络代币存入连接器保证金实现的）。对网络代币供应量的上行压力，发过来影响网络中每个代币的供应量，因为他们自己的连接器代币保证金增加了。 网络代币模型创建了网络中智能代币成员之间的协同关系。可以与以太坊类比，任何一个成功的以太坊服务提升了以太坊的价值，从而使整个以太坊平台和生态受益。对于这样的网络模型存在许多用例，包括在局部网络使用的社区货币，网络游戏工作室发行的所有游戏中共享的信用体系，由多个独立企业支持的联合忠诚度计划等等。网络代币也可以通过其自己的连接器成为其他网络的一部分。 8.2 BNT代币发行推出的第一个智能代币是Bancor网络代币（BNT），它是中继器性质的网络代币，用于连接Bancor网络中的所有代币。BNT目前只有ETH一种连接器，权重CW是10%，由Bprotocol基金会管理，这是一个瑞士非营利组织，其核心目标是将Bancor协议作为智能代币的全球标准推广，智能代币可以通过Bancor网络进行内部兑换从而形成自动的分布式的流动性。 BTN代币发行（发生在2017年6月12日）募集的资金用户培养基于Bancor协议的代币和应用构成的健康生态。为了鼓励采用新的智能代币，以通过上述说的网络效应加强现有的BNT社区，利用BTN作为其连接代币的新的智能代币将有资格获得Bprotocol基金会的支持。 8.3 募资的分配为了透明和完全公开，BTN代币发行募集的ETH按照不同用途做了分配，如下所述： 20%作为BTN代币的连接器ETH代币的准备金，从而有力地支撑了10%的初始连接器权重； 40％用于开发Bancor协议和周边技术。这包括在现有或者未来区块链上实现Bancor协议智能合约，已经为方便终端用户使用这些智能合约提供用户友好的应用，例如智能代币钱包、智能代币创建和管理页面、智能代币市场和搜索门户、创建中继代币、智能代币治理和数据报告等。 12%用于Bancor协议的市场拓展，以及发展Bancor生态系统，例如支持Bancor网络中具有创新性和战略意义的智能代币项目，以及提高相关人士对Bancor协议和Bancor的理解和认知。这些努力会在Bancor网络形成一个强有力的社区，同时会加快用户创造的代币的长尾的发展。 10%用于为流行的ERC20代币建立中继代币和组合代币的例子，以及基于以太坊平台上的代理代币例子，这些代理代币用于将来自其他区块链和各种现实资产的加密货币集成到Bancor网络中。 18％的运营成本，包括法律费用和其他管理费用。 BNT智能代币的初始发行量，一般分配给了参与募资的出资人，另一半由Bprotocol基金会持有并作为长期预算（锁定期两年），现在的以及将来的团队和顾问（分两年归属），合作伙伴（分两年归属），为了激励社区长期采用Bancor协议发放的社区补助金。如下图所示： 9 总结新兴的区块链经济，有潜力形成一个由数百万个创新的、小规模的、用户创造的代币组成的价值互联网。实现这个多样化和有弹性的未来，需要解决的首要障碍是，确保每个代币无论数量大小，都有足够的流动性。在本白皮书中，我们提出了基于Bancor协议的分布式流动性网络，该协议基于一种称为智能代币的新型代币的标准，通过为智能合约增加自发的低成本的做市商功能，来提供持续的流动性。基于连接代币准备金和智能的开源公式，智能代币可以与它连接的任何其他代币，以可以提前预测的价格兑换。 从整个系统的层面看，智能代币组成了一个互相连接的智能代币自治网络。这种创新架构使得任何代币可以无视流动性问题，自由地兑换为其他代币。从而为整个代币生态系统带来了网络效应。 Bancor协议推动了资产交易领域的发展，它引入了一种解决方案，可以解决由于需求的双重符合导致的小规模代币的流动性问题。该解决方案构成了目前由传统金融市场和交易所的专业做市商使用的基于劳动力模型的可靠而全面的替代方案。 10 致谢我们对在撰写本文时支持我们的许多人表示感谢。 特别感谢Meni Rosenfeld，Yudi Levi，Amatzia Benartzi，Ron Gross，Assaf Bahat，Sefi Golan，Joshua Alliance，Brian Singerman，Adi Scope，Dory Asher，Tal Keinan，firmo.network, Wings.ai, TheFloor，Arie Ben-David来自以色列货币变革运动，Ithacash的Scott Morris，Benjamin Egelund-Müller以及Blockito和Blockchain Labs的团队，以及Bancor团队，Ilana，Asaf，Or，Omry，Itay和Mati。 您的支持和反馈对我们改进本文档非常重要。 谢谢。 参考文献[1] Satoshi Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System, 2009. URLhttp://www.bitcoin.org/bitcoin.pdf. [2] Wikipedia. Coincidence of Wants, . URL https://en.wikipedia.org/wiki/Coincidence_of_wants. [3] Wikipedia. Long Tail, . URL https://en.wikipedia.org/wiki/Long_tail. [4] Erik Brynjolfsson, Yu Jeffrey Hu, and Michael D. Smith. From Niches to Riches: Anatomy of the Long Tail. Sloan Management Review, 47(4):67–71, 2006. URL http://sloanreview.mit.edu/article/from-niches-to-riches-anatomy-of-the-long-tail/. [5] Fabian Vogelsteller and Vitalik Buterin. ERC-20 Token Standard, 2015. URL https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md. [6] Vitalik Buterin. Ethereum White Paper, 2014. URL https://github.com/ethereum/wiki/wiki/White-Paper.","categories":[{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"Bancor","slug":"Bancor","permalink":"http://yankaili2006.github.io/tags/Bancor/"},{"name":"智能合约","slug":"智能合约","permalink":"http://yankaili2006.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"name":"加密货币","slug":"加密货币","permalink":"http://yankaili2006.github.io/tags/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81/"},{"name":"流动性","slug":"流动性","permalink":"http://yankaili2006.github.io/tags/%E6%B5%81%E5%8A%A8%E6%80%A7/"}]},{"title":"xunwulian.com/维护sql","slug":"xunwulian.com/维护sql","date":"2021-03-05T02:51:50.115Z","updated":"2021-03-05T02:51:50.115Z","comments":true,"path":"2021/03/05/xunwulian.com/维护sql/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/xunwulian.com/%E7%BB%B4%E6%8A%A4sql/","excerpt":"","text":"1、设置失效日期为，激活日期加一年的那个月的一号update tb_cardinfo set user_end_date = date_add(date_add(user_open_date, interval 1 year), interval - day( date_add(user_open_date, interval 1 year) ) + 1 day) ;2、设置appNameupdate tb_cardinfo c from app a set c.app_name = a.app_name where c.app_id = a.app_id;3、设置套餐update tb_cardinfo set user_pkg = 1 where user_pkg = 10; update tb_cardinfo set user_pkg = 2 where user_pkg = 30; update tb_cardinfo set user_pkg = 3 where user_pkg = 70; update tb_cardinfo set user_pkg = 4 where user_pkg = 150; update tb_cardinfo set user_pkg = 5 where user_pkg = 500; update tb_cardinfo set user_pkg = 6 where user_pkg = 700; update tb_cardinfo set user_pkg = 7 where user_pkg = 1024; update tb_cardinfo set user_pkg = 8 where user_pkg = 2048;导入卡号命令cat card_20170320.txt | awk &apos;{print &quot;insert into tb_cardinfo(msisdn, user_id, sub_user_id, app_id) values(\\x27&quot;$1&quot;\\x27&quot;&quot;,\\x27&quot;1&quot;\\x27,&quot;&quot;\\x27\\x27&quot;&quot;,\\x27zxtd\\x27);&quot;}&apos; &gt;card_20170320.sql awk &apos;{print &quot;update tb_cardinfo set user_id = (select user_id from sys_user where username = \\x27&quot;$3&quot;\\x27), user_name =\\x27&quot;$3&quot;\\x27 where msisdn&gt;=\\x27&quot;$1&quot;\\x27 and msisdn &lt;=\\x27&quot;$2&quot;\\x27;&quot;}&apos; cat zxtd.txt | awk &apos;{print &quot;update tb_cardinfo set user_id = (select user_id from sys_user where username = \\x27&quot;$4&quot;\\x27), user_name =\\x27&quot;$4&quot;\\x27, app_id=\\x27zxtd\\x27, user_pkg=&quot;$6&quot;, user_open_date=\\x27&quot;$1&quot;\\x27, user_price=&quot;$7&quot; where msisdn&gt;=\\x27&quot;$2&quot;\\x27 and msisdn &lt;=\\x27&quot;$3&quot;\\x27;&quot;}&apos; &gt;zxtd.sql","categories":[],"tags":[]},{"title":"xunwulian.com/账号","slug":"xunwulian.com/账号","date":"2021-03-05T02:51:50.115Z","updated":"2021-03-05T02:51:50.115Z","comments":true,"path":"2021/03/05/xunwulian.com/账号/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/xunwulian.com/%E8%B4%A6%E5%8F%B7/","excerpt":"","text":"服务器地址52.172 123.57.52.172 root NmL*fZJyE^ZWtOJy*k*NmfyEWZZZW^ZWtO*176.31服务器 101.200.176.31 端口号 8888 ssh -p 8888 yankaili2006@101.200.176.31 账号密码 yankaili2006 NmL*fJy*k*NmL*fJyE^ZWtO 账号密码 root Jy*kJy*k*NmfJ*Jy*k*NmfJNmfJ Zxtd@123北京迅物联 平台登陆地址：http://101.200.176.31/ 登录名：DEF001 密码：123123 后台登录：http://101.200.176.31/admin/ 登录名：kongjianguo 密码：jianguo123移动物联网业务管理平台： http://ec.iot.10086.cn 登录名：ec_0112394 密码：zhiXUN!234深圳的公司做的关于流量卡管理的网站 http://www.yousim.cn:8018/知讯通达服务器： 101.200.176.31 adminstrator zhiXUN123知讯通达阿里云： 登录名：510567577@qq.com 密码：jianguo123知讯通达ec.iot.10086.cn账号： ec_0112394 密码zhiXUN!23456 ec_0126193 密码zhiXUN!23456 ec_0122757 密码zhiXUN!234567 ec_0150136 zhiXUN!234567 ec_0124728 密码zhiXUN!2345678 ec_0114092 密码zhiXUN!2345678 ec_0126387 密码zhiXUN!23456 账号名：知迅通达 密码：123456 这个是您的帐号 http://gps.zhdkj.net:8885 这个是电脑板 浏览器端平台 用户名北京孔经理 密码123456 根据ID号添加车辆，，发送指令 IP 119.29.112.234 6969 招聘邮箱163： mail.zhixuntongda.com 用户名：kongjianguo 密码：JIANguo!23 拉勾登陆13601117948 密码jianguo123 移动网站http://ec.iot.10086.cn ec_0323221 @Lwk031922 上海昊丞：ec_0323221 @Lwk031922 桐如科技：ec_0324707 @LWK666888 李建峰：lijianfeng Ljf2016,. 山东账号ec_1559092 密码15716999235Abc！ 测试账号： ceshi Ceshi@123 14760660600阿里云账号： 15901411984 8880066ccivv 备案系统 https://beian.gein.cn/order/index.htm 18830696669@163.com 8880066ccivv coola58@163.com 86581214第一年免费，第二年可以续费，沉默期可以支持三个月。另外还有支持语音的卡。 河北桐如信息技术有限公司河北隽如信息技术有限公司 魏强13903116905，你就说是高旭的朋友 刘东仁13931900144 主管 15931981561张恒， 中心主任 18803190025曹雷雷，邢台主管集客工作的副总经理 孙艳红18803190025集客部主任 林宪勇13931956456集客部主管，我好哥们 张冰13503198051重客中心主任 蒋会卿15703192556网优中心班长 尚立平15803192556，蒋会卿媳妇，也是我们这一批的，综合部主任 戴维娜15003199933目前在财务，以后结算财务问题可以找她2917630253 淘宝帐号密码： 2102361372@qq.com LWK031922, LWK031922邮箱：zyf.z@e-joined.com，地址：广东省广州市越秀区东风中路437号越秀城市广场南塔3101，曾一帆，18928934954 18830696669@163.com hebeitongru12345 NmL*fJy*k*NmL*fJyE^ZWtO 8880066ccIvv NmL*fJyE^ZWtOfJy*k*NmfJyE^ZWtOL* Zkp19870106 东营移动 http://223.99.141.141:10210/sdiotss/ 帐号 河北桐如 密码 Trkj3500 网络 4001 10086 6 服务器地址: 45.32.10.137 mysql: 8880066 微信： 微信支付商户号 1326297901 商户平台登录帐号 1326297901@1326297901 商户平台登录密码 850404 申请对应的公众号 讯物联（） 公众号APPID wx863985c3fec3b18a document.write(&apos;&lt;img src=\\&apos;&apos;+SitePath+&apos;template/paody/images/950x90.jpg\\&apos; /&gt;&apos;) UPDATE mac_vod SET d_downurl=REPLACE(d_downurl, &apos;localhost&apos;, &apos;disk.452b.ren&apos;); select * from mac_vod where d_downurl !=&apos;&apos; limit 1,10; UPDATE mac_vod SET d_downurl=REPLACE(d_downurl, &apos;disk.452b.ren/disk&apos;, &apos;disk.452b.ren&apos;); API Key c77ab855aea3f20a894887f914fd265f5b14defb Secret acfc962530acff08a6a235f6609d4927383b73a7 随机生成私钥 私钥：5HtGfkCiCHsMxGtKApFcak1gz5Vnu75nSxCVtCL7bfdhJwG5Yyr 公钥：EOS7UtDo5eqTHZCLepZijQpngUvv1xrAVoMr3M4vAHKFFio718x1b 邮箱 yankaili2006@163.com ccivv@2058.com wx39ceb8293ae88217 eea745d7eafd01ab5ff2cac8999f353f service confluence restart 重启命令 安装目录/opt/atlassian/confluence/confluence/ 数据库用的你原先的，库名confluence 用户confluenceuser 密码：confluencepass#WD12 yankaili2006@163.com 8880066ccivv 39.106.146.105 60.205.230.211 8880066ccIvv insert into tb_cardinfo(msisdn, user_id, user_name, app_id) values(&apos;1440387233474&apos;, &apos;1&apos;, &apos;admin&apos;, &apos;WXTSDSDT&apos;);8880066ccIvv","categories":[],"tags":[]},{"title":"xunwulian.com/server","slug":"xunwulian.com/server","date":"2021-03-05T02:51:50.114Z","updated":"2021-03-05T02:51:50.114Z","comments":true,"path":"2021/03/05/xunwulian.com/server/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/xunwulian.com/server/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"xunwulian.com/build_123","slug":"xunwulian.com/build_123","date":"2021-03-05T02:51:50.114Z","updated":"2021-03-05T02:51:50.114Z","comments":true,"path":"2021/03/05/xunwulian.com/build_123/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/xunwulian.com/build_123/","excerpt":"","text":"删除已经存在的镜像docker rm xwl-weixin-h5 docker rm xwl-web docker rm xwl-client docker rm xwl-dubbo构建镜像export JENKINS_JOB=/var/lib/jenkins/workspace/xunwulian cd $JENKINS_JOB/xwl-dubbo docker build -t 123.57.52.172:5000/xwl-dubbo:latest . docker push 123.57.52.172:5000/xwl-dubbo:latest cd $JENKINS_JOB/xwl-cmpp-client docker build -t 123.57.52.172:5000/xwl-client:latest . docker push 123.57.52.172:5000/xwl-client:latest cd $JENKINS_JOB/xwl-web docker build -t 123.57.52.172:5000/xwl-web:latest . docker push 123.57.52.172:5000/xwl-web:latest cd $JENKINS_JOB/xwl-weixin-h5 docker build -t 123.57.52.172:5000/xwl-weixin-h5:latest . docker push 123.57.52.172:5000/xwl-weixin-h5:latest拉取最新镜像docker pull 123.57.52.172:5000/xwl-dubbo:latest docker pull 123.57.52.172:5000/xwl-client:latest docker pull 123.57.52.172:5000/xwl-web:latest docker pull 123.57.52.172:5000/xwl-weixin-h5:latest运行docker xwldubbodocker run -d --restart unless-stopped -p 20880:20880 --name dubbo-xwl-v2 -v /opt/tomcat/xwl-web/upload:/opt/tomcat/xwl-web/upload -e &quot;appId=xwl&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-dubbo:latestclientdocker run -d --restart unless-stopped -p 20881:20880 --name client-xwl-v2 -e &quot;appId=xwl&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20882:20880 --name client-wxtsd-v2 -e &quot;appId=wxtsd&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20883:20880 --name client-zxrr-v2 -e &quot;appId=ZXRR&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20884:20880 --name client-hbwh-v2 -e &quot;appId=hbwh&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20885:20880 --name client-dchh-v2 -e &quot;appId=dchh&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20886:20880 --name client-jtxtrd-v2 -e &quot;appId=JTXTRD&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20887:20880 --name client-hbtrxxjs-v2 -e &quot;appId=HBTRXXJS&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20888:20880 --name client-wxtsdsdt-v2 -e &quot;appId=WXTSDSDT&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20889:20880 --name client-xwltqdh-v2 -e &quot;appId=TQDH&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latestwebdocker run -d --restart unless-stopped -p 5081:8080 --name xwl-web-v2 -v /opt/tomcat/xwl-web/upload:/opt/tomcat/xwl-web/upload -e &quot;appId=xwl&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-web:latest docker run -d --restart unless-stopped -p 5082:8080 --name xwl-weixin-v2 -e &quot;appId=xwl&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-weixin-h5:latest运行docker zxtdzxtddocker run -d --restart unless-stopped --net=host -p 20880:20880 --name dubbo-zxtd -e &quot;appId=zxtd&quot; -e &quot;registry=zookeeper://101.200.176.31:2181?backup=101.200.176.31:2182,101.200.176.31:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=zxtd -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-dubbo:latest docker run -d --restart unless-stopped -p 20881:20880 --name client-zxtd -e &quot;appId=zxtd&quot; -e &quot;registry=zookeeper://101.200.176.31:2181?backup=101.200.176.31:2182,101.200.176.31:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=zxtd -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-client:latest docker run -d --restart unless-stopped -p 5081:8080 --name web-zxtd -e &quot;appId=zxtd&quot; -e &quot;registry=zookeeper://101.200.176.31:2181?backup=101.200.176.31:2182,101.200.176.31:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=zxtd -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; 123.57.52.172:5000/xwl-web:latest运行时环境变量JAVA_OPTS=&quot;-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; environment: - JVM_OPTS=-Xmx12g -Xms12g -XX:MaxPermSize=1024m","categories":[],"tags":[]},{"title":"xunwulian.com/build","slug":"xunwulian.com/build","date":"2021-03-05T02:51:50.114Z","updated":"2021-03-05T02:51:50.114Z","comments":true,"path":"2021/03/05/xunwulian.com/build/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/xunwulian.com/build/","excerpt":"","text":"删除已经存在的镜像docker rm xwl-weixin-h5 docker rm xwl-web docker rm xwl-client docker rm xwl-dubbo构建镜像export JENKINS_JOB=/data/jenkins/jobs/zxtd/workspace cd $JENKINS_JOB/xwl-dubbo docker build -t www.zhixuntongda.com:5000/xwl-dubbo:latest . docker push www.zhixuntongda.com:5000/xwl-dubbo:latest cd $JENKINS_JOB/xwl-cmpp-client docker build -t www.zhixuntongda.com:5000/xwl-client:latest . docker push www.zhixuntongda.com:5000/xwl-client:latest cd $JENKINS_JOB/xwl-web docker build -t www.zhi xuntongda.com:5000/xwl-web:latest . docker push www.zhixuntongda.com:5000/xwl-web:latest cd $JENKINS_JOB/xwl-weixin-h5 docker build -t www.zhixuntongda.com:5000/xwl-weixin-h5:latest . docker push www.zhixuntongda.com:5000/xwl-weixin-h5:latest拉取最新镜像docker pull www.zhixuntongda.com:5000/xwl-dubbo:latest docker pull www.zhixuntongda.com:5000/xwl-client:latest docker pull www.zhixuntongda.com:5000/xwl-web:latest docker pull www.zhixuntongda.com:5000/xwl-weixin-h5:latest运行docker xwldubbodocker run -d --restart unless-stopped -p 20880:20880 --name dubbo-xwl-v2 -v /opt/tomcat/xwl-web/upload:/opt/tomcat/xwl-web/upload -e &quot;appId=xwl&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-dubbo:latestclientdocker run -d --restart unless-stopped -p 20881:20880 --name client-xwl-v2 -e &quot;appId=xwl&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20882:20880 --name client-wxtsd-v2 -e &quot;appId=wxtsd&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20883:20880 --name client-zxrr-v2 -e &quot;appId=ZXRR&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20884:20880 --name client-hbwh-v2 -e &quot;appId=hbwh&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20885:20880 --name client-dchh-v2 -e &quot;appId=dchh&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20886:20880 --name client-jtxtrd-v2 -e &quot;appId=JTXTRD&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20887:20880 --name client-hbtrxxjs-v2 -e &quot;appId=HBTRXXJS&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20888:20880 --name client-wxtsdsdt-v2 -e &quot;appId=WXTSDSDT&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 20889:20880 --name client-xwltqdh-v2 -e &quot;appId=TQDH&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latestwebdocker run -d --restart unless-stopped -p 5081:8080 --name xwl-web-v2 -v /opt/tomcat/xwl-web/upload:/opt/tomcat/xwl-web/upload -e &quot;appId=xwl&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-web:latest docker run -d --restart unless-stopped -p 5082:8080 --name xwl-weixin-v2 -e &quot;appId=xwl&quot; -e &quot;registry=zookeeper://123.57.52.172:2181?backup=123.57.52.172:2182,123.57.52.172:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-weixin-h5:latest运行docker zxtdzxtddocker run -d --restart unless-stopped --net=host -p 20880:20880 --name dubbo-zxtd -e &quot;appId=zxtd&quot; -e &quot;registry=zookeeper://101.200.176.31:2181?backup=101.200.176.31:2182,101.200.176.31:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=zxtd -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-dubbo:latest docker run -d --restart unless-stopped -p 20881:20880 --name client-zxtd -e &quot;appId=zxtd&quot; -e &quot;registry=zookeeper://101.200.176.31:2181?backup=101.200.176.31:2182,101.200.176.31:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=zxtd -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-client:latest docker run -d --restart unless-stopped -p 5081:8080 --name web-zxtd -e &quot;appId=zxtd&quot; -e &quot;registry=zookeeper://101.200.176.31:2181?backup=101.200.176.31:2182,101.200.176.31:2183&quot; -e &quot;JAVA_OPTS=-Dspring.profiles.active=zxtd -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; www.zhixuntongda.com:5000/xwl-web:latest运行时环境变量JAVA_OPTS=&quot;-Dspring.profiles.active=xwl -Xms128m -Xmx512m -Xss512k -XX:NewSize=128m -server -XX:+DisableExplicitGC -verbose:gc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/tmp/gc.log&quot; environment: - JVM_OPTS=-Xmx12g -Xms12g -XX:MaxPermSize=1024m","categories":[],"tags":[]},{"title":"xunwulian.com/shell","slug":"xunwulian.com/shell","date":"2021-03-05T02:51:50.114Z","updated":"2021-03-05T02:51:50.115Z","comments":true,"path":"2021/03/05/xunwulian.com/shell/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/xunwulian.com/shell/","excerpt":"","text":"重启整个服务 迅物联docker restart dubbo-xwl-v2 docker restart client-lyygrl-v2 docker restart client-xwltqdh-v2 docker restart client-wxtsdsdt-v2 docker restart client-hbtrxxjs-v2 docker restart client-jtxtrd-v2 docker restart client-dchh-v2 docker restart client-zxrr-v2 docker restart client-wxtsd-v2 docker restart client-xwl-v2 docker restart client-hbwh-v2 docker restart xwl-web-v2重启服务 知讯通达docker restart dubbo-zxtd docker restart client-zxtd docker restart web-zxtd清理文件命令清理大文件 find . -size +100M -exec ls -lh {} \\; find . -name &apos;*.log&apos; -size +100M -exec rm -rf {} \\;","categories":[],"tags":[]},{"title":"react/react","slug":"react/react","date":"2021-03-05T02:51:50.113Z","updated":"2021-03-05T02:51:50.113Z","comments":true,"path":"2021/03/05/react/react/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/react/react/","excerpt":"","text":"react 入门教程https://www.gitbook.com/book/hulufei/react-tutorialES6标准入门http://es6.ruanyifeng.com/#README","categories":[],"tags":[]},{"title":"python/python","slug":"python/python","date":"2021-03-05T02:51:50.113Z","updated":"2021-03-05T02:51:50.113Z","comments":true,"path":"2021/03/05/python/python/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/python/python/","excerpt":"","text":"npm 安装搭建https://github.com/8788/blog/issues/7","categories":[],"tags":[]},{"title":"python/JupyterHub","slug":"python/JupyterHub","date":"2021-03-05T02:51:50.112Z","updated":"2021-03-05T02:51:50.112Z","comments":true,"path":"2021/03/05/python/JupyterHub/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/python/JupyterHub/","excerpt":"","text":"参考链接https://zero-to-jupyterhub.readthedocs.io/en/latest/setup-jupyterhub/setup-jupyterhub.htmlconfig.yamlGenerate a random hex string representing 32 bytes to use as a security token. Run this command in a terminal and copy the output: openssl rand -hex 32Create and start editing a file called config.yaml. In the code snippet below we start the widely available nano editor, but any editor will do. nano config.yamlWrite the following into the config.yaml file but instead of writing paste the generated hex string you copied in step 1. proxy: secretToken: &quot;&lt;4235da6ad3e92513ebf9da8377f91ac482629cb7e559a392595be5343ba24ceb&gt;&quot;Note It is common practice for Helm and Kubernetes YAML files to indent using two spaces. Save the config.yaml file. In the nano editor this is done by pressing CTRL+X or CMD+X followed by a confirmation to save the changes. Install JupyterHubMake Helm aware of the JupyterHub Helm chart repository so you can install the JupyterHub chart from it without having to use a long URL name. helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/ helm repo updateThis should show output like: Hang tight while we grab the latest from your chart repositories……Skip local chart repository…Successfully got an update from the “stable” chart repository…Successfully got an update from the “jupyterhub” chart repositoryUpdate Complete. ⎈ Happy Helming!⎈ Now install the chart configured by your config.yaml by running this command from the directory that contains your config.yaml:Suggested values: advanced users of Kubernetes and Helm should feelfree to use different values.helm upgrade --install jhub-release jupyterhub/jupyterhub \\ --namespace liyankai \\ --version=0.8.2 \\ --values ../config.yaml cd /Users/liyankai/github/auto_config helm install jhub-liyankai ./jupyterhub --namespace liyankai --version=0.8.2 --values jupyterhub/values.yaml --timeout=30m helm install jhub-liyankai ./jupyterhub --namespace liyankai --version=0.8.2 --values ./config.yaml --timeout=30m配置oauth2https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/348 auth: type: custom custom: className: &apos;oauthenticator.azuread.AzureAdOAuthenticator&apos; config: client_id: &quot;market&quot; client_secret: &quot;market&quot; oauth_callback_url: &quot;http://192.168.64.23:32234/hub/oauth_callback&quot; token_url: &quot;https://yangxing3-dev-console.tsingj.local:31813/api/api-sso/oauth/token&quot; github oauth2https://github.com/settings/applications/new https://zero-to-jupyterhub.readthedocs.io/en/latest/administrator/security.html多种授权方式 https://zero-to-jupyterhub.readthedocs.io/en/0.7.0/authentication.htmlgo oauth2 server https://github.com/RichardKnop/go-oauth2-server https://github.com/go-oauth2/oauth2httpshttps://discourse.jupyter.org/t/setting-up-binder-with-jupyterhub-oauth/2266 binderhub: config: BinderHub: auth_enabled: true hub_url: https://hub.cern.ch use_named_servers: true jupyterhub: singleuser: cmd: jupyterhub-singleuser hub: services: binder: oauth_redirect_uri: &quot;https://binder.cern.ch/oauth_callback&quot; oauth_client_id: &quot;binder-oauth-client-test&quot; allowNamedServers: true extraEnv: OAUTH2_AUTHORIZE_URL: https://oauth.web.cern.ch/OAuth/Authorize OAUTH2_TOKEN_URL: https://oauth.web.cern.ch/OAuth/Token OAUTH_CALLBACK_URL: https://hub.cern.ch/hub/oauth_callback extraConfig: hub_extra: | c.JupyterHub.redirect_to_server = False binder: | from kubespawner import KubeSpawner class BinderSpawner(KubeSpawner): def start(self): if &apos;image&apos; in self.user_options: # binder service sets the image spec via user options self.image = self.user_options[&apos;image&apos;] return super().start() c.JupyterHub.spawner_class = BinderSpawner auth: type: custom custom: className: oauthenticator.generic.GenericOAuthenticator config: token_url: &quot;https://oauth.web.cern.ch/OAuth/Token&quot; userdata_url: &quot;https://oauthresource.web.cern.ch/api/User&quot; groupdata_url: &quot;https://oauthresource.web.cern.ch/api/Group&quot; userdata_method: GET userdata_params: {&apos;state&apos;: &apos;state&apos;} username_key: usernamenot usedhub: cookieSecret: &quot;[redacted]&quot; db: type: sqlite-memory proxy: secretToken: &quot;[redacted]&quot; service: type: NodePort labels: {} annotations: {} nodePort: 30888 rbac: enabled: false ingress: enabled: true hosts: - hub.127.0.0.1.xip.iousedproxy: secretToken: &quot;&lt;4235da6ad3e92513ebf9da8377f91ac482629cb7e559a392595be5343ba24ceb&gt;&quot; https: hosts: - 192.168.64.24 letsencrypt: contactEmail: omitted@omitted.edu #ingress: # annotations: # kubernetes.io/tls-acme: &quot;true&quot; # tls: # - hosts: # - 192.168.64.24 # secretName: kubelego-tls-jupyterhub singleuser: defaultUrl: &quot;/lab&quot; hub: service: loadBalancerIP: 192.168.64.24 extraConfig: jupyterlab: | c.Spawner.cmd = [&apos;jupyter-labhub&apos;] auth: admin: users: - adminusedproxy: secretToken: &quot;&lt;4235da6ad3e92513ebf9da8377f91ac482629cb7e559a392595be5343ba24ceb&gt;&quot; service: type: NodePort nodePorts: http: 30080 https: 30443 enabled: true https: hosts: - liyankai.tsingj.local type: secret secret: name: &apos;my-secret&apos; singleuser: defaultUrl: &quot;/lab&quot; hub: extraConfig: jupyterlab: | c.Spawner.cmd = [&apos;jupyter-labhub&apos;] extraEnv: OAUTH2_AUTHORIZE_URL: https://yangxing3-dev-console.tsingj.local:31813/api/api-sso/oauth/authorize OAUTH2_TOKEN_URL: https://yangxing3-dev-console.tsingj.local:31813/api/api-sso/oauth/token OAUTH_CALLBACK_URL: https://liyankai.tsingj.local:30443/hub/oauth_callback #OAUTH_TLS_VERIFY: 0 auth: type: custom custom: className: oauthenticator.generic.GenericOAuthenticator config: client_id: &quot;market&quot; client_secret: &quot;market&quot; token_url: https://yangxing3-dev-console.tsingj.local:31813/api/api-sso/oauth/token userdata_url: https://yangxing3-dev-console.tsingj.local:31813/api/userinfo userdata_method: GET userdata_params: {&apos;state&apos;: &apos;state&apos;} username_key: preferred_username auth: type: custom custom: className: jupyterhub-tsingjauthenticator.tsingj_auth.TsingjOAuthenticator TsingjOAuthenticator: enable_auth_state: true client_id: &apos;market&apos; client_secret: &apos;market&apos; oauth_callback_url: &apos;https://liyankai.tsingj.local:30443/hub/oauth_callback&apos;","categories":[],"tags":[]},{"title":"python/notebook","slug":"python/notebook","date":"2021-03-05T02:51:50.112Z","updated":"2021-03-05T02:51:50.113Z","comments":true,"path":"2021/03/05/python/notebook/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/python/notebook/","excerpt":"","text":"Jupyter notebook extensions 扩展插件的安装pip3 install jupyter_contrib_nbextensions jupyter contrib nbextension install --user --skip-running-check","categories":[],"tags":[]},{"title":"python/jupyterlab","slug":"python/jupyterlab","date":"2021-03-05T02:51:50.112Z","updated":"2021-03-05T02:51:50.112Z","comments":true,"path":"2021/03/05/python/jupyterlab/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/python/jupyterlab/","excerpt":"","text":"这个插件是通过 JupyterLab MicroPython Kernel https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/608","categories":[],"tags":[]},{"title":"python/conda","slug":"python/conda","date":"2021-03-05T02:51:50.112Z","updated":"2021-03-05T02:51:50.112Z","comments":true,"path":"2021/03/05/python/conda/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/python/conda/","excerpt":"","text":"mac上jupyterlab 安装https://lyric.im/c/the-craft-of-selfteaching/T-appendix.jupyter-installation-and-setup cd ~/Downloads/ wget https://repo.anaconda.com/archive/Anaconda3-2018.12-MacOSX-x86_64.sh chmod +x Anaconda3-2018.12-MacOSX-x86_64.sh ./Anaconda3-2018.12-MacOSX-x86_64.sh安装完毕之后，打开 Terminal(Windows 系统需要打开之前安装的 Anaconda Prompt 输入），继续安装几个组件： conda update conda conda update anaconda conda install -c conda-forge nodejs conda install -c conda-forge jupyterlab # 这是用来升级 jupyter lab 到最新版的方法安装完毕之后，可以看看各个你将要用到的可执行命令都在什么地方，用 which 命令（windows下用 where 命令）： which python python --version which node node -v which jupyter jupyter lab --version jupyter notebook --version which pip pip --version第一次启动 Jupyter lab打开 Terminal，cd 到你想打开 Jupyter lab 的目录（就是你保存 ipynb 文件的地方，以便在 Jupyter lab 中打开、浏览、编辑 ipynb 文件），在这里以用户根目录为例 ~/： cd ~ jupyter lab","categories":[],"tags":[]},{"title":"project项目/轰炸机","slug":"project项目/轰炸机","date":"2021-03-05T02:51:50.111Z","updated":"2021-03-05T02:51:50.111Z","comments":true,"path":"2021/03/05/project项目/轰炸机/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/project%E9%A1%B9%E7%9B%AE/%E8%BD%B0%E7%82%B8%E6%9C%BA/","excerpt":"","text":"引入webdriverfrom selenium import webdriver self.options = webdriver.FirefoxOptions() # self.options.add_argument(&apos;--headless&apos;) # 后台模式模拟打开浏览器# def func0(self): browser = webdriver.Firefox(firefox_options=self.options) browser.implicitly_wait(8) browser.get(&apos;https://codemart.com/password&apos;) browser.implicitly_wait(8) browser.find_element_by_xpath(&apos;//*[@id=&quot;container&quot;]/div/div/div/div[2]/div/div/form/div/button[1]&apos;).click() browser.find_element_by_xpath(&apos;//*[@id=&quot;container&quot;]/div/div/div/div[2]/div/div/form/div/div[2]/div[1]/input&apos;).send_keys(self.phone) browser.find_element_by_xpath(&apos;//*[@id=&quot;container&quot;]/div/div/div/div[2]/div/div/form/div/div[2]/div[1]/div[3]&apos;).click() browser.implicitly_wait(1) browser.quit()短信轰炸机https://www.lanzous.com/i2qmg9a 海盗SMS1.0.2 SXZ9AUVGVCJC 激活码电话轰炸机http://www.yunhu121.com/download.php?u=370268f2ff56c936692e9816a6b4e15c FN0002272159X188NUIBHODTM APP下载链接 http://185.243.56.143/440049.apk 类型：31天会员卡; 卡密：gMV7j1lFpCQYHID5代理轰炸机http://www.yunhu121.com/index.php?g=proxy&amp;m=passport&amp;a=Login A00000877C0F86 86581214Abc abc1234 默认 下载链接 http://t.cn/EqKkMAm轰炸机调查http://www.duanxinhongzhaji.com/ http://www.duanxinhongzha.com/sms/ http://www.yizhihu.top/ http://duanxin.abco.wang/ http://zha.vvoso.com/index.php发卡平台https://www.toolv.cn/tool/baiduyun/","categories":[],"tags":[]},{"title":"project项目/AccessibilityService微信辅助服务","slug":"project项目/AccessibilityService微信辅助服务","date":"2021-03-05T02:51:50.111Z","updated":"2021-03-05T02:51:50.111Z","comments":true,"path":"2021/03/05/project项目/AccessibilityService微信辅助服务/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/project%E9%A1%B9%E7%9B%AE/AccessibilityService%E5%BE%AE%E4%BF%A1%E8%BE%85%E5%8A%A9%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"AccessibilityService1、基于AccessbilityService实现微信自动抢红包插件下载链接 效果： http://mihuakabao.oss-cn-beijing.aliyuncs.com/static/luckymoney.mp4 使用时注意事项 开启微信消息通知栏功能 在系统电池相关选项中，设置不锁屏和休眠 插件运行过程中，手机显示为系统页面，不要在微信聊天页面 2、代码实现讲解安卓系统上的辅助功能，使用该功能，需要授权App获取该权限。 在AndroidManifest.xml文件中配置服务 WxRobotService&lt;service android:name=&quot;com.onesatoshi.mm.WxRobotService&quot; android:enabled=&quot;true&quot; android:exported=&quot;true&quot; android:label=&quot;@string/app_name&quot; android:permission=&quot;android.permission.BIND_ACCESSIBILITY_SERVICE&quot;&gt; &lt;intent-filter android:priority=&quot;10000&quot;&gt; &lt;action android:name=&quot;android.accessibilityservice.AccessibilityService&quot; /&gt; &lt;/intent-filter&gt; &lt;meta-data android:name=&quot;android.accessibilityservice&quot; android:resource=&quot;@xml/auto_service_config&quot; /&gt; &lt;/service&gt;配置自定义Service的属性&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;accessibility-service xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:accessibilityEventTypes=&quot;typeAllMask&quot; android:accessibilityFeedbackType=&quot;feedbackGeneric&quot; android:accessibilityFlags=&quot;flagDefault|flagRetrieveInteractiveWindows|flagIncludeNotImportantViews&quot; android:canRetrieveWindowContent=&quot;true&quot; android:description=&quot;@string/app_name&quot; /&gt;其中，packageNames空着表示监听所有的应用 accessibilityFlags这个参数不能设置为flagDefault，而需要设置为flagDefault|flagRetrieveInteractiveWindows|flagIncludeNotImportantViews 重写方法public class WxRobotService extends AccessibilityService { @Override public void onAccessibilityEvent(final AccessibilityEvent event) { } @Override protected void onServiceConnected() { } }实现业务逻辑业务代码在onAccessibilityEvent实现，直接贴代码 private void processLuckMoneyEvent(AccessibilityEvent event) { Log.d(TAG, &quot;luckyMoneyStep:&quot; + luckyMoneyStep); // 1.当前在聊天界面，查找并点击领取红包 if (luckyMoneyStep == -1) { // 有人发信息 记录信息内容 会直接点开信息 if (event.getEventType() == AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED) { if (handleNotification(event, &quot;[微信红包]&quot;)) { luckyMoneyStep = 1; } } else if (event.getClassName() != null &amp;&amp; &quot;com.tencent.mm.ui.LauncherUI&quot;.equals(event.getClassName().toString())) { AccessibilityNodeInfo rootNode = getRootInActiveWindow(); if (rootNode == null) { Log.e(TAG, &quot;rootNode is null&quot;); return; } List&lt;AccessibilityNodeInfo&gt; chatList = rootNode.findAccessibilityNodeInfosByViewId(&quot;com.tencent.mm:id/b4m&quot;); if (chatList != null &amp;&amp; !chatList.isEmpty()) { for (int i = 0; i &lt; chatList.size(); i++) { AccessibilityNodeInfo chatNode = chatList.get(i); if (chatNode != null) { List&lt;AccessibilityNodeInfo&gt; tipList = chatNode.findAccessibilityNodeInfosByViewId(&quot;com.tencent.mm:id/mm&quot;); if (tipList != null &amp;&amp; tipList.size() &gt; 0) { chatNode.performAction(AccessibilityNodeInfo.ACTION_CLICK); doSleep(200); Log.i(TAG, &quot;有新消息，点击消息提示&quot;); luckyMoneyStep = 1; } else { Log.i(TAG, &quot;没有消息提示&quot;); } } else { Log.i(TAG, &quot;chatNode is null&quot;); } } } else { Log.i(TAG, &quot;对话列表&quot;); } } else { } } else if (luckyMoneyStep == 1) { if (&quot;com.tencent.mm.plugin.readerapp.ui.ReaderAppUI&quot;.equals(event.getClassName().toString())) { goBack(); doSleep(200); luckyMoneyStep = -1; } else { String keyWord = &quot;微信红包&quot;; AccessibilityNodeInfo rootNode = getRootInActiveWindow(); if (rootNode == null) { Log.e(TAG, &quot;rootNode is null&quot;); return; } boolean foundLuckyMoney = false; List&lt;AccessibilityNodeInfo&gt; bu = rootNode.findAccessibilityNodeInfosByViewId(&quot;com.tencent.mm:id/ao4&quot;); if (bu == null || bu.isEmpty()) { Log.e(TAG, keyWord + &quot; is null&quot;); } else { for (int i = 0; i &lt; bu.size(); i++) { Log.i(TAG, &quot;bu.size:&quot; + bu.size() + &quot;, i:&quot; + i); AccessibilityNodeInfo nodeInfo = bu.get(i); // 已经领取了 List&lt;AccessibilityNodeInfo&gt; hasDoneList = nodeInfo.findAccessibilityNodeInfosByViewId(&quot;com.tencent.mm:id/ape&quot;); if (hasDoneList != null &amp;&amp; hasDoneList.size() &gt; 0) { Log.d(TAG, &quot;&lt;&quot; + keyWord + &quot;&gt; 已经领过了&quot;); continue; } hasDoneList = nodeInfo.findAccessibilityNodeInfosByViewId(&quot;com.tencent.mm:id/apw&quot;); if (hasDoneList != null &amp;&amp; hasDoneList.size() &gt; 0) { Log.d(TAG, &quot;&lt;&quot; + keyWord + &quot;&gt; 已收钱&quot;); continue; } hasDoneList = nodeInfo.findAccessibilityNodeInfosByViewId(&quot;com.tencent.mm:id/apf&quot;); if (hasDoneList == null || hasDoneList.size() &lt;= 0) { Log.d(TAG, &quot;&lt;&quot; + keyWord + &quot;&gt; 不是微信红包&quot;); continue; } if (nodeInfo != null &amp;&amp; nodeInfo.isClickable()) { nodeInfo.performAction(AccessibilityNodeInfo.ACTION_CLICK); Log.d(TAG, &quot;点击 &lt;&quot; + keyWord + &quot;&gt;&quot; + &quot;, id:&quot; + nodeInfo.getClassName().toString()); luckyMoneyStep = 2; foundLuckyMoney = true; break; } else { Log.d(TAG, &quot;&lt;&quot; + keyWord + &quot;&gt; 不能点击&quot;); } } } // 没有找到可以抢的红包 if (!foundLuckyMoney) { if (scrollNum &gt; 2) { Log.i(TAG, &quot;滚动多次，scrollNum:&quot; + scrollNum); scrollNum = 0; goBack(); luckyMoneyStep = -1; } else { rootNode = getRootInActiveWindow(); List&lt;AccessibilityNodeInfo&gt; listViewNodeParent = rootNode.findAccessibilityNodeInfosByViewId(&quot;com.tencent.mm:id/akn&quot;); if (listViewNodeParent != null &amp;&amp; listViewNodeParent.size() &gt; 0) { AccessibilityNodeInfo listViewNode = listViewNodeParent.get(0).getChild(1); if (listViewNode != null &amp;&amp; listViewNode.isScrollable()) { scrollNum++; listViewNode.performAction(AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD); doSleep(200); Log.i(TAG, &quot;没有更多红包了，滑动一页&quot;); } else { Log.e(TAG, &quot;listViewNode is null&quot;); } } else { Log.e(TAG, &quot;listViewNodeParent is null&quot;); } } } } } else if (luckyMoneyStep == 2) { // 3.抢到红包后的详情页面 if (findAndClickNodeByViewId(&quot;com.tencent.mm:id/cv0&quot;, 0, &quot;开&quot;)) { Log.i(TAG, &quot;抢到红包了&quot;); luckyMoneyStep = 3; } else if (findAndClickNodeByViewId(&quot;com.tencent.mm:id/dty&quot;, 0, &quot;确认收款&quot;)) { Log.i(TAG, &quot;确认收款&quot;); luckyMoneyStep = 3; } else if (findNodeByViewId(&quot;com.tencent.mm:id/cqz&quot;, 0, &quot;已存入零钱，可直接转账&quot;) != null) { goBack(); luckyMoneyStep = 1; } else if (findNodeByViewId(&quot;com.tencent.mm:id/dt1&quot;, 0, &quot;已收钱&quot;) != null) { goBack(); luckyMoneyStep = 1; } } else if (luckyMoneyStep == 3) { doSleep(2000); goBack(); // 继续打开红包 luckyMoneyStep = 1; } }完整的代码，戳这里","categories":[],"tags":[]},{"title":"mpc/多方安全计算MPC","slug":"mpc/多方安全计算MPC","date":"2021-03-05T02:51:50.110Z","updated":"2021-03-05T02:51:50.110Z","comments":true,"path":"2021/03/05/mpc/多方安全计算MPC/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/mpc/%E5%A4%9A%E6%96%B9%E5%AE%89%E5%85%A8%E8%AE%A1%E7%AE%97MPC/","excerpt":"","text":"https://alibaba-gemini-lab.github.io/ https://talk.nervos.org/t/topic/412 https://talk.nervos.org/t/topic/1418 GChttps://github.com/esonghori/TinyGarble 密码学http://staff.ustc.edu.cn/~mfy/","categories":[],"tags":[]},{"title":"mysql/mysql error","slug":"mysql/mysql error","date":"2021-03-05T02:51:50.110Z","updated":"2021-03-05T02:51:50.110Z","comments":true,"path":"2021/03/05/mysql/mysql error/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/mysql/mysql%20error/","excerpt":"","text":"2017-03-19，mysql启动失败，耽误了很长时间。解决方案 mkdir -p /var/run/mysqld/ ls -ld /var/run/mysqld/ chown mysql.mysql /var/run/mysqld/ /etc/init.d/mysqld startCREATE DATABASE phone CHARACTER SET utf8 COLLATE utf8_general_ci;","categories":[],"tags":[]},{"title":"mysql/mysql","slug":"mysql/mysql","date":"2021-03-05T02:51:50.110Z","updated":"2021-03-05T02:51:50.110Z","comments":true,"path":"2021/03/05/mysql/mysql/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/mysql/mysql/","excerpt":"","text":"mysql临时密码丢失https://blog.csdn.net/lihaitao_1/article/details/54024652sql_mode=only_full_group_by] with root cause; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Expression #20 of SELECT list is not in GROUP BY clause and contains nonaggregated column &apos;c.commentCount&apos; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by] with root cause com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Expression #20 of SELECT list is not in GROUP BY clause and contains nonaggregated column &apos;c.commentCount&apos; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by两种解决方法set sql_mode=&apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;; set global sql_mode=&apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;彻底解决方法sudo vim /etc/my.cnf [mysqld] sql_mode=&apos;NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES&apos;MAC OX命令行启动/停止/重启MySQL命令:sudo /usr/local/mysql/support-files/mysql.server start sudo /usr/local/mysql/support-files/mysql.server stop sudo /usr/local/mysql/support-files/mysql.server restartsql文件太大SET GLOBAL max_allowed_packet=1073741824; mysql导入报错ERROR 1840 (HY000) at line 24: @@GLOBAL.GTID_PURGED can only be set when @@GLOBAL.GTID_EXECUTED is empty.进入mysql模式，重置master # mysql -u root -p输入密码 mysql&gt; reset master; 重启sqlmkdir -p /var/run/mysqld/ ls -ld /var/run/mysqld/ chown mysql.mysql /var/run/mysqld/ service mysqld restart /etc/init.d/mysqld startcentos 安装mysqlhttps://typecodes.com/linux/yuminstallmysql5710.html systemctl restart mysqld.service创建数据库CREATE DATABASE IF NOT EXISTS zxtd DEFAULT CHARSET utf8 COLLATE utf8_general_ci;允许root远程登录GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;xposedfP8[+3bmx@s3.eq}k&apos; WITH GRANT OPTION; FLUSH PRIVILEGES GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;fuyinhy123&apos; WITH GRANT OPTION; FLUSH PRIVILEGES; use mysql; update user set host=&apos;%&apos; where user=&apos;root&apos; AND host=&apos;localhost&apos;; FLUSH PRIVILEGES;查看mysql库各表容量大小select table_schema as &apos;数据库&apos;, table_name as &apos;表名&apos;, table_rows as &apos;记录数&apos;, truncate(data_length/1024/1024, 2) as &apos;数据容量(MB)&apos;, truncate(index_length/1024/1024, 2) as &apos;索引容量(MB)&apos; from information_schema.tables where table_schema=&apos;cashloansc_nuanshou&apos; order by data_length desc, index_length desc;","categories":[],"tags":[]},{"title":"mpc/zkp","slug":"mpc/zkp","date":"2021-03-05T02:51:50.109Z","updated":"2021-03-05T02:51:50.109Z","comments":true,"path":"2021/03/05/mpc/zkp/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/mpc/zkp/","excerpt":"","text":"https://zhuanlan.zhihu.com/p/90711138 零知识证明的本质就是在不揭晓我所知道或拥有的某样东西的前提下，向别人证明我有很大几率（这点很重要，零知识证明说到底是一个概率上的证明）确实知道或拥有这个东西。 zk-SNARKs（Zero-Knowledge Succinct Non-Interactive Argument of Knowledge）算法 任何零知识证明都必须满足的三个关键属性： 完整性（completeness）：如果证明者是诚实的，那么她最终会说服验证者。可靠性（Soundness）：证明者只能说服验证者该陈述是否属实。零知识性（Zero-knowledgeness）：除了知道陈述是真实的，验证者不知道任何额外的信息。","categories":[],"tags":[]},{"title":"mpc/sgx","slug":"mpc/sgx","date":"2021-03-05T02:51:50.109Z","updated":"2021-03-05T02:51:50.109Z","comments":true,"path":"2021/03/05/mpc/sgx/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/mpc/sgx/","excerpt":"","text":"sgx的官方tutorial https://software.intel.com/en-us/articles/introducing-the-intel-software-guard-extensions-tutorial-series","categories":[],"tags":[]},{"title":"mpc/同态加密HE","slug":"mpc/同态加密HE","date":"2021-03-05T02:51:50.109Z","updated":"2021-03-05T02:51:50.109Z","comments":true,"path":"2021/03/05/mpc/同态加密HE/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/mpc/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86HE/","excerpt":"","text":"目前已经有很多发布的开源同态加密算法，IBM研究员Victor Shoup和Shai Halevi已经发布了开源的同态加密库HElib(HElib同态加密算法开源库，参考网址： https ://github. com/shaih/HElib)，米用 C++编写。thep (The Homomorphic Encryption Project)库，也是一个开源的数据同态加密库（Thep数据同态加密库实现，参考网址：http://code, google, com/p/thep/)，本发明采用了改良的HElib库进行加密运算。有效的 提高了运算速度，为本发明提供了支撑。 HELIBhttps://eprint.iacr.org/2018/244.pdf https://github.com/shaih/HElib Microsoft SEAL For Pythonhttps://github.com/Huelse/SEAL-Python 如何使用 Julia 语言实现「同态加密+机器学习」https://cloud.tencent.com/developer/article/1558568 ToyFHE 库https://github.com/JuliaComputing/ToyFHE.jl","categories":[],"tags":[]},{"title":"linux/zookeeper集群","slug":"linux/zookeeper集群","date":"2021-03-05T02:51:50.109Z","updated":"2021-03-05T02:51:50.109Z","comments":true,"path":"2021/03/05/linux/zookeeper集群/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/zookeeper%E9%9B%86%E7%BE%A4/","excerpt":"","text":"docker pull zookeeper启动 ZK 镜像 docker run --name my_zookeeper -d zookeeper:latest这个命令会在后台运行一个 zookeeper 容器, 名字是 my_zookeeper, 并且它默认会导出 2181 端口.接着我们使用: docker logs -f my_zookeeper使用 ZK 命令行客户端连接 ZK因为刚才我们启动的那个 ZK 容器并没有绑定宿主机的端口, 因此我们不能直接访问它. 但是我们可以通过 Docker 的 link 机制来对这个 ZK 容器进行访问. 执行如下命令: docker run -it --rm --link my_zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper因为一个一个地启动 ZK 太麻烦了, 所以为了方便起见, 我直接使用 docker-compose 来启动 ZK 集群.首先创建一个名为 docker-compose.yml 的文件, 其内容如下: version: &apos;2&apos; services: zoo1: image: zookeeper restart: always container_name: zoo1 ports: - &quot;2181:2181&quot; environment: ZOO_MY_ID: 1 ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 zoo2: image: zookeeper restart: always container_name: zoo2 ports: - &quot;2182:2181&quot; environment: ZOO_MY_ID: 2 ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888 zoo3: image: zookeeper restart: always container_name: zoo3 ports: - &quot;2183:2181&quot; environment: ZOO_MY_ID: 3 ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888安裝docker-compose yum install -y docker-compose $ pip install virtualenv $ virtualenv venv $ source venv/bin/activate (venv) $ pip install docker-compose (venv) $ docker-compose --version docker-compose version: 1.4.2 pip install -U docker-compose接着我们在 docker-compose.yml 当前目录下运行: COMPOSE_PROJECT_NAME=zk_test docker-compose up COMPOSE_PROJECT_NAME=zk_test docker-compose up -d COMPOSE_PROJECT_NAME=zk_test docker-compose ps COMPOSE_PROJECT_NAME=zk_test docker-compose down使用 Docker 命令行客户端连接 ZK 集群通过 docker-compose ps 命令, 我们知道启动的 ZK 集群的三个主机名分别是 zoo1, zoo2, zoo3, 因此我们分别 link 它们即可: docker run -it --rm \\ --link zoo1:zk1 \\ --link zoo2:zk2 \\ --link zoo3:zk3 \\ --net zktest_default \\ zookeeper zkCli.sh -server zk1:2181,zk2:2181,zk3:2181通过本地主机连接 ZK 集群因为我们分别将 zoo1, zoo2, zoo3 的 2181 端口映射到了 本地主机的2181, 2182, 2183 端口上, 因此我们使用如下命令即可连接 ZK 集群了: zkCli.sh -server localhost:2181,localhost:2182,localhost:2183","categories":[],"tags":[]},{"title":"linux/安全","slug":"linux/安全","date":"2021-03-05T02:51:50.109Z","updated":"2021-03-05T02:51:50.109Z","comments":true,"path":"2021/03/05/linux/安全/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/%E5%AE%89%E5%85%A8/","excerpt":"","text":"ssh key 登录生成密钥ssh-keygen -t rsa 更名mv ./.ssh/id_rsa.pub ./.ssh/authorized_keys chmod 644 .ssh关闭密码登录用vi打开配置文件vi /etc/ssh/sshd_config PubkeyAuthentication yes AuthorizedKeysFile ~/.ssh/authorized_keys PasswordAuthentication noesc :wq!保存退出 重启/etc/rc.d/init.d/sshd restart限制登录vi /etc/hosts.allow sshd:192.168.0.100:allow //允许IP 192.168.0.100 登录 sshd:192.168.0.:allow //允许IP 192.168.0. 网段登录 sshd:all:deny //禁止其他的所有IP登录 或者","categories":[],"tags":[]},{"title":"linux/nexus","slug":"linux/nexus","date":"2021-03-05T02:51:50.108Z","updated":"2021-03-05T02:51:50.108Z","comments":true,"path":"2021/03/05/linux/nexus/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/nexus/","excerpt":"","text":"借鉴文章https://mritd.me/2017/01/08/set-up-docker-registry-by-nexus/安装 nexus首先将 nexus 移动到任意位置wget --no-check-certificate https://download.sonatype.com/nexus/3/nexus-3.2.0-01-unix.tar.gz tar -zxvf nexus-3.2.0-01-unix.tar.gz mv nexus-3.2.0-01 /usr/local创建 nexus 用户adduser -r -s /sbin/nologin -d /data/nexus-data nexus默认 nexus 运行后会在同级目录下创建一个 sonatype-work 工作目录，并将其数据保存在此目录中，所以为了数据持久化先手动创建并设置其数据存储位置 创建基本目录结构 mkdir -p /usr/local/sonatype-work 创建建数据目录 mkdir -p /data/nexus-data/{etc,log,tmp} 将数据目录软连接到工作目录 ln -s /data/nexus-data /usr/local/sonatype-work/nexus3 更新所有目录权限 chmod -R 755 /usr/local/{sonatype-work,nexus-3.2.0-01} /data/nexus-data chown -R nexus:nexus /usr/local/{sonatype-work,nexus-3.2.0-01} /data/nexus-data最后启动 nexus 访问 8081 端口即可 以前台方式运行 sudo -u nexus /usr/local/nexus-3.2.0-01/bin/nexus run 后台运行 sudo -u nexus /usr/local/nexus-3.2.0-01/bin/nexus start clean compile install -U -Dmaven.test.skip=true release:prepare release:perform -Darguments=&quot;-Dmaven.javadoc.skip=true http://123.57.52.172:8081/数据迁移/usr/local/sonatype-work tar -czvf sonatype-work.tgz /usr/local/sonatype-work scp jobs-cashloan.tgz root@123.57.52.172:/root/2wget https://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.1.2-bundle.tar.gz tar -xzvf nexus-2.1.2-bundle.tar.gz mv nexus-2.1.2 /usr/local adduser -r -s /sbin/nologin -d /data/nexus-data nexus 创建基本目录结构 mkdir -p /usr/local/sonatype-work 创建建数据目录 mkdir -p /data/nexus-data/{etc,log,tmp} cp /usr/local/nexus-2.1.2/bin/jsw/linux-x86-64/nexus /etc/init.d/nexus 更新所有目录权限 chmod -R 755 /usr/local/{sonatype-work,nexus-2.1.2} /data/nexus-data chown -R nexus:nexus /usr/local/{sonatype-work,nexus-2.1.2} /data/nexus-data sudo -u nexus /usr/local/nexus-2.1.2/bin/nexus start 后台运行 sudo -u nexus /usr/local/nexus-2.1.2/bin/nexus startjarmvn deploy:deploy-file -DgroupId=bouncycastle \\ -DartifactId=bcmail-jdk14 \\ -Dversion=1.4.5 \\ -Dpackaging=jar \\ -Dfile=./bouncycastle/bcmail-jdk14/1.4.5/bcmail-jdk14-1.4.5.jar \\ -DrepositoryId=&lt;id-to-map-on-server-section-of-settings.xml&gt; \\ -Durl=/bouncycastle/bcmail-jdk14/1.4.5/bcmail-jdk14-1.4.5.jar","categories":[],"tags":[]},{"title":"linux/nginx","slug":"linux/nginx","date":"2021-03-05T02:51:50.108Z","updated":"2021-03-05T02:51:50.108Z","comments":true,"path":"2021/03/05/linux/nginx/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/nginx/","excerpt":"","text":"报错recv() failed (104: Connection reset by peer) while reading response header from upstream, clien原因：缓存不足 https://blog.csdn.net/donglynn/article/details/76759548","categories":[],"tags":[]},{"title":"linux/redis","slug":"linux/redis","date":"2021-03-05T02:51:50.108Z","updated":"2021-03-05T02:51:50.108Z","comments":true,"path":"2021/03/05/linux/redis/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/redis/","excerpt":"","text":"redishttps://www.jianshu.com/p/af33284aa57a brew install redisTo have launchd start redis now and restart at login: brew services start redisOr, if you don’t want/need a background service you can just run: redis-server /usr/local/etc/redis.conf set a 123;//设置缓存：a=&gt;123 EXPIRE a 3600;//设置缓存时间（秒） TTL a；//查看缓存剩余时间给redis设置密码/usr/local/etc/redis.conf 中找到 # requirepass foobared修改为 requirepass qwe!@#123","categories":[],"tags":[]},{"title":"linux/screen","slug":"linux/screen","date":"2021-03-05T02:51:50.108Z","updated":"2021-03-05T02:51:50.108Z","comments":true,"path":"2021/03/05/linux/screen/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/screen/","excerpt":"","text":"Ctrl+a c ：创建窗口 Ctrl+a w ：窗口列表 Ctrl+a n ：下一个窗口 Ctrl+a p ：上一个窗口 Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换 Ctrl+a K(大写)：关闭当前窗口，并且切换到下一个窗口（当退出最后一个窗口时，该终端自动终止，并且退回到原始shell状态） exit ：关闭当前窗口，并且切换到下一个窗口（当退出最后一个窗口时，该终端自动终止，并且退回到原始shell状态） Ctrl+a d ：退出当前终端，返回加载screen前的shell命令状态","categories":[],"tags":[]},{"title":"linux/linux","slug":"linux/linux","date":"2021-03-05T02:51:50.107Z","updated":"2021-03-05T02:51:50.107Z","comments":true,"path":"2021/03/05/linux/linux/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/linux/","excerpt":"","text":"下载整个网站wget -c -r -np -k -L -p www.baidu.com","categories":[],"tags":[]},{"title":"linux/mac zookeeper","slug":"linux/mac zookeeper","date":"2021-03-05T02:51:50.107Z","updated":"2021-03-05T02:51:50.107Z","comments":true,"path":"2021/03/05/linux/mac zookeeper/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/mac%20zookeeper/","excerpt":"","text":"使用root启动zkserversudo zkserver start如果不使用root，Idea启动java程序，连接的时候会报错。","categories":[],"tags":[]},{"title":"linux/mac机器上Java环境搭建","slug":"linux/mac机器上Java环境搭建","date":"2021-03-05T02:51:50.107Z","updated":"2021-03-05T02:51:50.107Z","comments":true,"path":"2021/03/05/linux/mac机器上Java环境搭建/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/mac%E6%9C%BA%E5%99%A8%E4%B8%8AJava%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"JAVAtouch ~/.bash_profile vi ~/.bash_profile JAVA_HOME=&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home&quot; CLASS_PATH=&quot;$JAVA_HOME/lib&quot; PATH=&quot;.;$PATH:$JAVA_HOME/bin&quot; export JAVA_HOME source ~/.bash_profile","categories":[],"tags":[]},{"title":"linux/maven","slug":"linux/maven","date":"2021-03-05T02:51:50.107Z","updated":"2021-03-05T02:51:50.108Z","comments":true,"path":"2021/03/05/linux/maven/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/maven/","excerpt":"","text":"vim ~/.bash_profile MAVEN_OPTS=-Xmx1.5G -XX:MaxPermSize=0.7G source ~/.bash_profile","categories":[],"tags":[]},{"title":"linux/geckodriver","slug":"linux/geckodriver","date":"2021-03-05T02:51:50.106Z","updated":"2021-03-05T02:51:50.106Z","comments":true,"path":"2021/03/05/linux/geckodriver/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/geckodriver/","excerpt":"","text":"安装Xvfb及其他依赖yum install xorg-x11-server-Xvfb bzip gtk3安装火狐cd /usr/local wget https://ftp.mozilla.org/pub/firefox/releases/56.0.2/linux-x86_64/en-US/firefox-56.0.2.tar.bz2 tar xjvf firefox-56.0.2.tar.bz2ln -s /usr/local/firefox/firefox /usr/bin/firefox 安装Seleniumwget https://files.pythonhosted.org/packages/14/d6/650f5d2e149b83cd24989653efedf47a24cafb72e9d2dd03191a9f52f2f4/selenium-3.8.1-py2.py3-none-any.whl pip install selenium-3.8.1-py2.py3-none-any.whl这个一定要按照版本来 安装gtk3 gtk2 旧的火狐版本是需要gtk2 的，新的需要gtk3为了不报错。还是全装上吧，yum install gtk3 yum install gtk2安装火狐驱动wget https://github.com/mozilla/geckodriver/releases/download/v0.23.0/geckodriver-v0.23.0-linux64.tar.gz tar xzvf geckodriver-v0.23.0-linux64.tar.gz cp geckodriver /usr/local/bin/测试控制台输入firefox出现类似这个说明火狐安装成功。Error: GDK_BACKEND does not match available displays 测试爬虫脚本from pyvirtualdisplay import Display from selenium import webdriver display = Display(visible=0, size=(800, 600)) display.start() driver = webdriver.Firefox() driver.get(&apos;https://www.baidu.com&apos;) print(driver.title) driver.quit() display.stop()输出：百度一下，你就知道说明安装成功。","categories":[],"tags":[]},{"title":"linux/centos环境安装dblog","slug":"linux/centos环境安装dblog","date":"2021-03-05T02:51:50.106Z","updated":"2021-03-05T02:51:50.106Z","comments":true,"path":"2021/03/05/linux/centos环境安装dblog/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/centos%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85dblog/","excerpt":"","text":"JDKyum search java | grep -i --color JDK yum install -y java-1.8.0-openjdk-devel.x86_64Mysqlyum install -y mysql yum install -y mysql-devel wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm rpm -ivh mysql-community-release-el7-5.noarch.rpm yum install -y mysql-community-server配置 service mysqld restart systemctl start mysqld.service mysql -u root set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;xposedfP8[+3bmx@s3.eq}k&apos;); grant all privileges on *.* to root@&apos;%&apos;identified by &apos;xposedfP8[+3bmx@s3.eq}k&apos;; flush privileges;/etc/my.cnf [client] default-character-set=utf8mb4 [mysqld] character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci init_connect=&apos;SET NAMES utf8mb4&apos; skip-character-set-client-handshake = true [mysql] default-character-set = utf8mb4 create database onesatoshiblog CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;放开端口 /sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPTnginxsudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm sudo yum install -y nginx sudo systemctl start nginx.service sudo systemctl enable nginx.service/etc/nginx/nginx.conf iptablesiptables -L -n iptables -A INPUT -p tcp --dport 8443 -j ACCEPT iptables -A INPUT -p tcp --dport 8185 -j ACCEPT iptables -A INPUT -p tcp --dport 18080 -j ACCEPT firewall查看端口： firewall-cmd --list-ports添加端口 firewall-cmd --zone=public --add-port=8185/tcp --permanent firewall-cmd --zone=public --add-port=8443/tcp --permanent生效 firewall-cmd --reload firewall-cmd --zone=public --add-port=80/tcp --permanent firewall-cmd --zone=public --add-port=8443/tcp --permanent firewall-cmd --zone=public --add-port=8185/tcp --permanent firewall-cmd --zone=public --add-port=8999/tcp --permanent firewall-cmd --zone=public --add-port=3306/tcp --permanent firewall-cmd --zone=public --remove-port=3306/tcp --permanent firewall-cmd --reloadredisyum install -y epel-release yum install -y redis vim /etc/redis.conf 找到下面这一行 bind 127.0.0.1 注释掉 #bind 127.0.0.1 #requirepass foobared service redis restart chkconfig redis onconfigupdate sys_config set site_url = &apos;http://198.13.54.170:8443&apos;, static_web_site = &apos;http://198.13.54.170:8443&apos;; update sys_config set site_url = &apos;http://www.xposed.store&apos;, static_web_site = &apos;http://www.xposed.store&apos;;","categories":[],"tags":[]},{"title":"linux/jenkins","slug":"linux/jenkins","date":"2021-03-05T02:51:50.106Z","updated":"2021-03-05T02:51:50.107Z","comments":true,"path":"2021/03/05/linux/jenkins/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/jenkins/","excerpt":"","text":"安装yum -y install java curl http://pkg.jenkins-ci.org/redhat/jenkins.repo -o /etc/yum.repos.d/jenkins.repo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key yum -y install jenkins起停systemctl enable jenkins service jenkins start配置 WAR包位于: /usr/lib/jenkins/ 配置文件位于： /etc/sysconfig/jenkins 一般不需要配置 home目录是：/var/lib/jenkins，开始的时候是空的，一般启动jenkins服务，就开始出现各种文件。 日志文件是：/var/log/jenkins/jenkins.log jenkins执行docker命令jenkins 加入 docker 用户组这样在jenkin中可以直接执行docker命令 sudo usermod -aG docker jenkins sudo systemctl restart jenkins命令sudo /bin/docker buildjenkins installsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key sudo yum install jenkins sudo service jenkins start sudo service jenkins stop sudo service jenkins restart&lt;br&gt;&lt;br&gt; sudo chkconfig jenkins on systemctl status jenkins.service","categories":[],"tags":[]},{"title":"linux/git","slug":"linux/git","date":"2021-03-05T02:51:50.106Z","updated":"2021-03-05T02:51:50.106Z","comments":true,"path":"2021/03/05/linux/git/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/git/","excerpt":"","text":"git config --global pack.threads 1 git config --global pack.deltaCacheSize = 1024m git config --global pack.windowMemory 4096m","categories":[],"tags":[]},{"title":"linux/dubbo","slug":"linux/dubbo","date":"2021-03-05T02:51:50.106Z","updated":"2021-03-05T02:51:50.106Z","comments":true,"path":"2021/03/05/linux/dubbo/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/dubbo/","excerpt":"","text":"java.net.SocketException: Can’t assign requested address 解决：虚拟机参数：-DJava.NET.preferIPv4Stack=true","categories":[],"tags":[]},{"title":"linux/CentOS一键安装shadowsocks脚本","slug":"linux/CentOS一键安装shadowsocks脚本","date":"2021-03-05T02:51:50.105Z","updated":"2021-03-05T02:51:50.105Z","comments":true,"path":"2021/03/05/linux/CentOS一键安装shadowsocks脚本/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/CentOS%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85shadowsocks%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Shadowsocks是一个基于python的轻量级socks代理软件,可以在任何系统简单的实现访问被屏蔽的网站。网友也常称为科学上网，简称ss,在此分享与记录CentOS一键安装shadowsocks脚本。 一、使用root用户登录，运行以下命令：123wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks.shchmod +x shadowsocks.sh.&#x2F;shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 二、安装完成后，脚本提示如下：12345678910Congratulations, shadowsocks install completed!Your Server IP:your_server_ipYour Server Port:8989Your Password:your_passwordYour Local IP:127.0.0.1Your Local Port:1080Your Encryption Method:aes-256-cfbWelcome to visit:http:&#x2F;&#x2F;teddysun.com&#x2F;342.htmlEnjoy it! 三、卸载方法1.&#x2F;shadowsocks.sh uninstall 四、配置文件配置文件路径为：/etc/shadowsocks.json 单用户配置： 12345678910&#123; &quot;server&quot;:&quot;your_server_ip&quot;, &quot;server_port&quot;:8989, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;yourpassword&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false&#125; 多用户配置： 123456789101112131415&#123; &quot;server&quot;:&quot;your_server_ip&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:&#123; &quot;8989&quot;:&quot;password0&quot;, &quot;9001&quot;:&quot;password1&quot;, &quot;9002&quot;:&quot;password2&quot;, &quot;9003&quot;:&quot;password3&quot;, &quot;9004&quot;:&quot;password4&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false&#125; 五、相关使用命令12345678#启动&#x2F;etc&#x2F;init.d&#x2F;shadowsocks start#停止&#x2F;etc&#x2F;init.d&#x2F;shadowsocks stop#重启&#x2F;etc&#x2F;init.d&#x2F;shadowsocks restart#状态&#x2F;etc&#x2F;init.d&#x2F;shadowsocks status password = 8880066ccIvvport = 15390cipher = aes-256-cfb 47.89.12.249 Your Server IP : 47.244.36.207Your Server Port : 15390Your Password : 8880066ccIvvYour Encryption Method: aes-256-cfb StarChat@123 wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log","categories":[],"tags":[]},{"title":"linux/Shadowsocks","slug":"linux/Shadowsocks","date":"2021-03-05T02:51:50.105Z","updated":"2021-03-05T02:51:50.105Z","comments":true,"path":"2021/03/05/linux/Shadowsocks/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/Shadowsocks/","excerpt":"","text":"Shadowsocks配置文件{ &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:30080, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;8880066ccivv&quot;, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;timeout&quot;:300 }启动脚本/usr/bin/shadowsocks-server -c /etc/shadowsocks-go/config.json vim /usr/local/etc/privoxy/config /usr/local/Cellar/privoxy/3.0.26/sbin/privoxy --no-daemon /usr/local/etc/privoxy/config brew services restart privoxy vim /Users/yankaili/Library/Application\\ Support/ShadowsocksX-NG/ss-local-config.json { &quot;method&quot; : &quot;aes-128-gcm&quot;, &quot;server&quot; : &quot;45.77.248.237&quot;, &quot;password&quot; : &quot;8880066ccIvv&quot;, &quot;local_address&quot; : &quot;127.0.0.1&quot;, &quot;server_port&quot; : 8989, &quot;timeout&quot; : 60, &quot;local_port&quot; : 1086 }","categories":[],"tags":[]},{"title":"linux/centos mongodb搭建","slug":"linux/centos mongodb搭建","date":"2021-03-05T02:51:50.105Z","updated":"2021-03-05T02:51:50.105Z","comments":true,"path":"2021/03/05/linux/centos mongodb搭建/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/centos%20mongodb%E6%90%AD%E5%BB%BA/","excerpt":"","text":"一、安装环境及配置yumvi /etc/yum.repos.d/mongodb-org-3.2.repo [mongodb-org-3.2] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc二、安装MongoDByum -y install mongodb-org三、验证/etc/init.d/mongod start mongo配置端口查看端口： firewall-cmd --list-ports添加端口 firewall-cmd --zone=public --add-port=8185/tcp --permanent firewall-cmd --zone=public --add-port=8443/tcp --permanent生效 firewall-cmd --reload /sbin/iptables -I INPUT -p tcp --dport 27017 -j ACCEPT 貌似没用： /sbin/iptables -I INPUT -p tcp --dport 9999 -j ACCEPT brew install mongodb注意：/data/db 是 MongoDB 默认的启动的数据库路径(–dbpath) sudo mkdir -p /data/db sudo chown -R yankaili /data/db cd /usr/local/Cellar/mongodb/3.6.3/bin mongod把mongod加入环境变量中 vim ~/.bash_profile export PATH=/usr/local/Cellar/mongodb/3.6.3/bin:$PATH source ~/.bash_profile配置文件在 /usr/local/etc/mongod.conf开一个新终端 启动客户端 mongo use admin db.createUser({ user: &quot;root&quot;, pwd: &quot;StarChat@123&quot;, roles: [{ role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; }] }) db.createUser({ user: &quot;root&quot;, pwd: &quot;StarChat@123&quot;, roles: [{ role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; }, { role: &quot;dbOwner&quot;, db: &quot;limayq&quot; }] }) db.grantRolesToUser( &quot;root&quot;, [ { role: &quot;dbOwner&quot;, db:&quot;admin&quot;} ] ) db.grantRolesToUser( &quot;root&quot;, [ { role: &quot;dbOwner&quot;, db:&quot;limayq&quot;} ] ) use limayq db.createUser({ user: &quot;root&quot;, pwd: &quot;StarChat@123&quot;, roles: [{ role: &quot;dbOwner&quot;, db: &quot;limayq&quot; }] }) use limayq db.auth(&quot;root&quot;, &quot;StarChat@123&quot;) db.dropUser(&quot;root&quot;) db.getUsers() mongoexport -h 172.18.0.1 --port 27017 -u root -p StarChat@123 -d limayq -c sjmh_report2019032709 -o sjmh_report2019032709.json mongoexport -h 172.18.0.1 --port 27017 -u root -p StarChat@123 -d limayq -c sjmh_basedata_json2019032709 -o sjmh_basedata_json2019032709.json mongoexport -h 172.18.0.1 --port 27017 -u root -p StarChat@123 -d limayq -c cl_sjmhope_call_record -o cl_sjmhope_call_record.json docker cp 3657ef3e12ed47d8b70e6979bc0765bc20d62a67e39006efbcd5633a51495e0c:/sjmh_report2019032709.json . docker cp 3657ef3e12ed47d8b70e6979bc0765bc20d62a67e39006efbcd5633a51495e0c:/sjmh_basedata_json2019032709.json . docker cp 3657ef3e12ed47d8b70e6979bc0765bc20d62a67e39006efbcd5633a51495e0c:/cl_sjmhope_call_record.json .","categories":[],"tags":[]},{"title":"linux/centos抓取环境搭建","slug":"linux/centos抓取环境搭建","date":"2021-03-05T02:51:50.105Z","updated":"2021-03-05T02:51:50.106Z","comments":true,"path":"2021/03/05/linux/centos抓取环境搭建/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/linux/centos%E6%8A%93%E5%8F%96%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"java8 + tomcat[root@localhost]# mongo添加超级管理账号&gt; use crawler &gt; db.createUser( { user:&quot;admin&quot;, pwd:&quot;123&quot;, roles:[{role:&quot;readWrite&quot;,db:&quot;crawler&quot;}] } )查看用户是否创建成功&gt;show usersmongodbmongoexport -d test -c json_depth -o depth.dat mongoexport -d test -c json_trade -o trade.dat mongoimport -d test -c json_depth depth.dat mongoimport -d test -c json_trade trade.datchromedrivercd /etc/yum.repos.d wget http://people.centos.org/hughesjr/chromium/6/chromium-el6.repo yum install chromium==3.11.0 pip install selenium yum install -y https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm wget https://chromedriver.storage.googleapis.com/2.38/chromedriver_linux64.zip unzip chromedriver_linux64.zip cp chromedriver /usr/local/bin/selenium在cmd中输入 python然后在python界面输入 import selenium help(selenium) __version__ = &apos;3.11.0&apos;运行java -Dwebdriver.chrome.driver=&quot;/usr/local/Cellar/python@2/2.7.14_3/Frameworks/Python.framework/Versions/2.7/bin/chromedriver&quot; -jar news/target/news-0.0.1-SNAPSHOT.jar java -jar stock/target/stock-0.0.1-SNAPSHOT.jar java -jar web/target/web-0.0.1-SNAPSHOT.jar java -Dwebdriver.chrome.driver=&quot;/usr/local/bin/chromedriver&quot; -jar news-0.0.1-SNAPSHOT.jar java -jar stock-0.0.1-SNAPSHOT.jar java -jar web-0.0.1-SNAPSHOT.jarreact-adminnpm config set registry https://registry.npm.taobao.org --global npm config set disturl https://npm.taobao.org/dist --globalnginxbrew install nginx sudo xcode-select --install brew services start nginx /usr/local/var/www vim /usr/local/etc/nginx/nginx.conf location /api/ { proxy_pass http://localhost:8080/api/; } /usr/local/nginx/conf/nginx.conf location / { root /root/app/react-admin/build/; } location /api/ { proxy_pass http://localhost:8080/api/; }","categories":[],"tags":[]},{"title":"jupyter/ipython","slug":"jupyter/ipython","date":"2021-03-05T02:51:50.103Z","updated":"2021-03-05T02:51:50.103Z","comments":true,"path":"2021/03/05/jupyter/ipython/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/jupyter/ipython/","excerpt":"","text":"IPython provides a rich toolkit to help you make the most of using Python interactively. Its main components are:A powerful interactive Python shellA Jupyter kernel to work with Python code in Jupyter notebooks and other interactive frontends. conda install pip","categories":[],"tags":[]},{"title":"ios/error","slug":"ios/error","date":"2021-03-05T02:51:50.103Z","updated":"2021-03-05T02:51:50.103Z","comments":true,"path":"2021/03/05/ios/error/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/ios/error/","excerpt":"","text":"ld: library not found for -lstdc++.6.0.9部分项目依赖 libstdc++.6.0.9 的会在Xcode 10无法运行 其原因是Xcode 10中将libstdc++.6.0.9库文件删除，原本功能迁移至其他库 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS12.0.sdk/usr/lib/libstdc++.6.0.9.tbd参考信息来源 http://ilongge.cn/2018/09/18/Mac--Xcode10_library_not_found_for_-lstdc++_6_0_9/","categories":[],"tags":[]},{"title":"jupyter/jupter框架","slug":"jupyter/jupter框架","date":"2021-03-05T02:51:50.103Z","updated":"2021-03-05T02:51:50.103Z","comments":true,"path":"2021/03/05/jupyter/jupter框架/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/jupyter/jupter%E6%A1%86%E6%9E%B6/","excerpt":"","text":"https://binderhub.readthedocs.io/en/latest/zero-to-binderhub/index.html","categories":[],"tags":[]},{"title":"jupyter/jupyter","slug":"jupyter/jupyter","date":"2021-03-05T02:51:50.103Z","updated":"2021-03-05T02:51:50.104Z","comments":true,"path":"2021/03/05/jupyter/jupyter/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/jupyter/jupyter/","excerpt":"","text":"jupyter的改进，越来越小 插件开发pip3 install ipython pip3 install requests tornado pandasjupyter 插件安装和启用https://mlln.cn/2018/03/31/jupyter%20notebook%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E4%B9%8B%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/ https://www.osgeo.cn/jupyter/examples/Notebook/Distributing%20Jupyter%20Extensions%20as%20Python%20Packages.html 您可以使用以下命令来安装nbextension： 1jupyter nbextension install path/to/my_extension/ [–user|–sys-prefix]默认安装是系统范围的。您可以使用–user来执行每个用户的安装，或者使用–sys-prefix来安装到Python的前缀（例如，在虚拟或conda环境中）。 my_extension是包含Javascript文件的目录。这会将其复制到Jupyter数据目录（确切位置取决于操作系统/平台 - 请参阅Data Files）。 如果插件正在开发中, 还没发布，您可以使用–symlink标志来链接您的扩展，而不是复制它，这样不需要在更改后重新安装。 要使用你的扩展，你还需要启用它，它告诉笔记本接口加载它。你可以用另一个命令来做到这一点： jupyter nbextension enable my_extension/main [–sys-prefix] 该参数引用包含您的load_ipython_extension函数的Javascript模块，在本例中为my_extension / main.js。有一个相应的禁用命令来停止使用扩展程序而不卸载它。 在版本4.2中进行了更改：添加了–sys-prefix参数 #### OAuth + JupyterHub Authenticator = OAuthenticator jupyterpip3 install jupyter一个便捷获取配置文件所在路径的命令： jupyter notebook --generate-config jupyter notebookjupyter hub的架构https://zero-to-jupyterhub.readthedocs.io/en/latest/administrator/architecture.htmljupyter插件https://github.com/yuvipanda/jupyterlab-nbmetadata from ipykernel.kernelapp import IPKernelApp from .kernel import IPrivpyKernel IPKernelApp.launch_instance(kernel_class=IPrivpyKernel) &quot;&quot;&quot;An example Jupyter kernel&quot;&quot;&quot; __version__ = &apos;0.1&apos; from .kernel import IPrivpyKerneljupyterhub认证方式https://github.com/jupyterhub/jupyterhub/wiki/Authenticators ldapauthenticator CASAuthenticator for CAS Single Sign-on SSO JSONWebToken Authenticator jupyterhub存储pgcontentshttps://github.com/quantopian/pgcontents","categories":[],"tags":[]},{"title":"hack/小米手机微信聊天记录","slug":"hack/小米手机微信聊天记录","date":"2021-03-05T02:51:50.102Z","updated":"2021-03-05T02:51:50.102Z","comments":true,"path":"2021/03/05/hack/小米手机微信聊天记录/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/hack/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/","excerpt":"","text":"小米手机备份数据库/storage/emulated/0/MIUI/backup/AllBackup/20190126_062015/ES文件管理器ES文件管理器把文件从手机存储转移到SD卡上 /storage/emulated/0/微信(com.tencent.mm).bakhandshaker使用handeshaker把文件同步到mac上 IMEI 和 UINIMEI获取：手机按键输入*#06#，得到 IMEI1 868663038393332 IMEI2 868663038393340 99001145919665 123456789abcdefUIN： app_brand_global_sp.xml &lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos; standalone=&apos;yes&apos; ?&gt; &lt;map&gt; &lt;set name=&quot;uin_set&quot;&gt; &lt;string&gt;1572774052&lt;/string&gt; &lt;string&gt;1444947140&lt;/string&gt; &lt;/set&gt; &lt;/map&gt;auth_info_key_prefs.xml &lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos; standalone=&apos;yes&apos; ?&gt; &lt;map&gt; &lt;int name=&quot;_auth_uin&quot; value=&quot;1444947140&quot; /&gt; &lt;boolean name=&quot;key_auth_info_prefs_created&quot; value=&quot;true&quot; /&gt; &lt;int name=&quot;key_auth_update_version&quot; value=&quot;654311483&quot; /&gt; &lt;string name=&quot;server_id&quot;&gt;e802080200000000087789c67c9200&lt;/string&gt; &lt;string name=&quot;_auth_key&quot;&gt;0a2408201220e003a95b9dd234c2c991942f740ce4c6a6e2090a658eac61ee090f0815b40a6212770873127308924e1268f8d2b12ef48452b12523479d638caa93f55ddb52cf914e197a1082b75dcc8bb9a4a17a5be8fad0002bdc555c6d0f75210494d273adafc359b0858a2399a16658ba3de47fd23b3a0fe8457ed9558bad202bcc7f3de1e8da9163f89d73a5041e237da71dbd30ea879418c182a5df01&lt;/string&gt; &lt;/map&gt; 1444947140解密码echo &quot;8686630383933321444947140&quot; | md5 | cut -c -7 e801fbf e481eda echo &quot;8686630383933401444947140&quot; | md5 79e22a0 echo &quot;123456789abcdef1444947140&quot; | md5 ec20418mac使用sqlcipherruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; &lt; /dev/null 2&gt; /dev/null brew install sqlcipher解密数据库.open EnMicroMsg.db PRAGMA key=&apos;e481eda&apos;; PRAGMA cipher_use_hmac=off; PRAGMA cipher_page_size=1024; PRAGMA kdf_iter=4000; ATTACH DATABASE &apos;MicroMsg.db&apos; AS mm KEY &apos;&apos;; SELECT sqlcipher_export(&apos;mm&apos;); DETACH DATABASE mm; .quit .open test.sqlite PRAGMA key=&apos;123456&apos;; PRAGMA cipher_use_hmac=off; PRAGMA cipher_page_size=1024; PRAGMA kdf_iter=4000; ATTACH DATABASE &apos;MicroMsg.db&apos; AS mm KEY &apos;&apos;; SELECT sqlcipher_export(&apos;mm&apos;); DETACH DATABASE mm; .quit sqlcipher ./EnMicroMsg.db &apos;PRAGMA key = &quot;d41d8cd&quot;; PRAGMA cipher_use_hmac = off; PRAGMA kdf_iter = 4000; ATTACH DATABASE &quot;decrypted_database.db&quot; AS decrypted_database KEY &quot;&quot;;SELECT sqlcipher_export(&quot;decrypted_database&quot;);DETACH DATABASE decrypted_database;&apos; sqlcipher ./EnMicroMsg.db &apos;PRAGMA key = &quot;d41d8cd&quot;; PRAGMA cipher_migrate; ATTACH DATABASE &quot;decrypted_database.db&quot; AS decrypted_database KEY &quot;&quot;;SELECT sqlcipher_export(&quot;decrypted_database&quot;);DETACH DATABASE decrypted_database;&apos;","categories":[],"tags":[]},{"title":"go/go","slug":"go/go","date":"2021-03-05T02:51:50.102Z","updated":"2021-03-05T02:51:50.102Z","comments":true,"path":"2021/03/05/go/go/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/go/go/","excerpt":"","text":"go安装包下载 如何构建公链：How To Clone Scrypt Based Altcoins for Fun and Profit","categories":[],"tags":[]},{"title":"go/go环境搭建","slug":"go/go环境搭建","date":"2021-03-05T02:51:50.102Z","updated":"2021-03-05T02:51:50.102Z","comments":true,"path":"2021/03/05/go/go环境搭建/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/go/go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"","text":"$ go get -u github.com/Masterminds/glide $ git clone https://github.com/btcsuite/btcd $GOPATH/src/github.com/btcsuite/btcd $ cd $GOPATH/src/github.com/btcsuite/btcd $ glide install $ go install . ./cmd/.. [WARN] Unable to checkout golang.org/x/crypto [ERROR] Update failed for golang.org/x/crypto: Cannot detect VCS [ERROR] Failed to do initial checkout of config: Cannot detect VCS $ rm -rf ~/.glide $ mkdir -p ~/.glide $ glide mirror set https://golang.org/x/mobile https://github.com/golang/mobile --vcs git $ glide mirror set https://golang.org/x/crypto https://github.com/golang/crypto --vcs git $ glide mirror set https://golang.org/x/net https://github.com/golang/net --vcs git $ glide mirror set https://golang.org/x/tools https://github.com/golang/tools --vcs git $ glide mirror set https://golang.org/x/text https://github.com/golang/text --vcs git $ glide mirror set https://golang.org/x/image https://github.com/golang/image --vcs git $ glide mirror set https://golang.org/x/sys https://github.com/golang/sys --vcs git 然后在项目中执行 $ glide init $ glide installcow和ss配合export http_proxy=http://127.0.0.1:7777 export https_proxy=http://127.0.0.1:7777安装golang.org/x/cryptocd $GOPATH/src/golang.org/x/ rm -rf * go get -u -v golang.org/x/tools go get -u -v golang.org/x/crypto go get -u -v golang.org/x/image go get -u -v golang.org/x/mobile go get -u -v golang.org/x/net go get -u -v golang.org/x/sys go get -u -v golang.org/x/text设置代理export GOPROXY=https://goproxy.io","categories":[],"tags":[]},{"title":"docker/docker-command","slug":"docker/docker-command","date":"2021-03-05T02:51:50.101Z","updated":"2021-03-05T02:51:50.101Z","comments":true,"path":"2021/03/05/docker/docker-command/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/docker/docker-command/","excerpt":"","text":"使用rancher安装mysql需要设置环境变量：MYSQL_ROOT_PASSWORD 端口映射MYSQL_DATABASE rancher自带的 rawmind/alpine-zk:3.4.9 jenkins 无法联网 --dns 8.8.8.8docker使用技巧 进入容器获取容器第第一个进程在宿主机上的PID号 docker inspect -f {{.State.Pid}} &lt;container_name&gt;|&lt;container_ID&gt;使用nsenter进入该容器 nsenter --target &lt;container_pid&gt; --mount --uts --ipc --net --pid","categories":[],"tags":[]},{"title":"docker/docker_install","slug":"docker/docker_install","date":"2021-03-05T02:51:50.101Z","updated":"2021-03-05T02:51:50.101Z","comments":true,"path":"2021/03/05/docker/docker_install/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/docker/docker_install/","excerpt":"","text":"registrydocker run -d -p 5000:5000 --restart always --name registry registry:2镜像加速配置 linux vim /etc/docker/daemon.json mac vim ~/.docker/daemon.json { &quot;insecure-registries&quot;:[&quot;192.168.12.247:5000&quot;] } { &quot;registry-mirrors&quot;: [&quot;https://z02l1jun.mirror.aliyuncs.com&quot;], &quot;insecure-registries&quot;:[&quot;123.57.52.172:5000&quot;] } sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service sudo sed -i &quot;s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon --registry-mirror=https://z02l1jun.mirror.aliyuncs.com|g&quot; /etc/systemd/system/docker.service sudo sed -i &quot;s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd --registry-mirror=https://z02l1jun.mirror.aliyuncs.com|g&quot; /etc/systemd/system/docker.service sudo systemctl daemon-reload sudo service docker restart启动docker服务COMPOSE_PROJECT_NAME=zk_test docker-compose ps COMPOSE_PROJECT_NAME=zk_test docker-compose up -d COMPOSE_PROJECT_NAME=zk_test docker-compose up -ddocker file配置vim /etc/docker/daemon.json { &quot;log-driver&quot;:&quot;json-file&quot;, &quot;log-opt&quot;:{ &quot;max-size&quot;:&quot;10m&quot;, &quot;max-file&quot;:1 } }一、docker安装1、添加 yum 源使用 Docker 官方提供的 CentOS 软件源。执行下面的命令添加 yum 软件源。 $ sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos; [dockerrepo] name=Docker Repository baseurl=https://yum.dockerproject.org/repo/main/centos/7/ enabled=1 gpgcheck=1 gpgkey=https://yum.dockerproject.org/gpg EOF2、安装 Docker更新 yum 软件源缓存，并安装 docker-engine。 $ sudo yum update $ sudo yum install docker-engine启动 Docker 引擎 $ sudo systemctl enable docker $ sudo systemctl start docker使用国内的Docker仓库daocloud： curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://aa5523ba.m.daocloud.io systemctl restart docker安装rancher docker run -d --restart=always -p 8080:8080 rancher/server","categories":[],"tags":[]},{"title":"docker/kubectl","slug":"docker/kubectl","date":"2021-03-05T02:51:50.101Z","updated":"2021-03-05T02:51:50.101Z","comments":true,"path":"2021/03/05/docker/kubectl/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/docker/kubectl/","excerpt":"","text":"kubectl 默认连接的任何集群 kubectl config view","categories":[],"tags":[]},{"title":"docker/k8s","slug":"docker/k8s","date":"2021-03-05T02:51:50.101Z","updated":"2021-03-05T02:51:50.101Z","comments":true,"path":"2021/03/05/docker/k8s/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/docker/k8s/","excerpt":"","text":"StatefulSethttps://draveness.me/kubernetes-statefulset/是用于管理有状态应用的工作负载对象，与 ReplicaSet 和 Deployment 这两个对象不同，StatefulSet 不仅能管理 Pod 的对象，还它能够保证这些 Pod 的顺序性和唯一性。 查看运行时间kubectl get pod -A --sort-by=.status.startTime kubectl get pod -A --sort-by=.status.startTime -o custom-columns=jettech_name:.spec.containers[0].name,jettech_image:.spec.containers[0].image .metadata.name .items[0].metadata.namespace kubectl get pod -A --sort-by=.status.startTime -o custom-columns=ns:.items[0].metadata.namespace,age: kubectl get pod -A --sort-by=.status.startTime -o custom-columns=ns:.metadata.namespace,age:.metadata.creationTimestamp,age1:.AGE | more","categories":[],"tags":[]},{"title":"docker/minikube","slug":"docker/minikube","date":"2021-03-05T02:51:50.101Z","updated":"2021-03-05T02:51:50.101Z","comments":true,"path":"2021/03/05/docker/minikube/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/docker/minikube/","excerpt":"","text":"##1.0 install minikube for macsysctl -a | grep -E --color &apos;machdep.cpu.features|VMX&apos; # 显示非空，则表示环境可以用，否则环境不可用 brew cleanup or brew cleanup -d -v brew install minikube for ubuntu curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 &amp;&amp; chmod +x minikube sudo mkdir -p /usr/local/bin/ sudo install minikube /usr/local/bin/ minikube version curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - sudo touch /etc/apt/sources.list.d/kubernetes.list echo &quot;deb http://apt.kubernetes.io/ kubernetes-xenial main&quot; | sudo tee -a /etc/apt/sources.list.d/kubernetes.list sudo apt-get update sudo apt-get install -y kubectl2. create kuster2.1 create minikube clusterlocal_ip=10.18.0.18 alias proxy=&apos;export all_proxy=socks5://${local_ip}:1086 ALL_PROXY=socks5://${local_ip}:1086 http_proxy=http://${local_ip}:1087 HTTP_PROXY=http://${local_ip}:1087 https_proxy=http://${local_ip}:1087 HTTPS_PROXY=http://${local_ip}:1087 no_proxy=tsingj.local,localhost,127.0.0.1,10.18.0.19,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24,192.168.0.0/16 NO_PROXY=tsingj.local,localhost,127.0.0.1,10.18.0.19,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24,192.168.0.0/16&apos; alias unproxy=&apos;unset all_proxy ALL_PROXY http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY&apos; # 注意只有当前terminal窗口有效，可以写到~/.bash_profile或者~/.bashrc proxy minikube delete #clear minikube’s local state, 报错可以忽略 minikube start --cpus 4 --memory 10240 --disk-size=100g --image-repository=registry.aliyuncs.com/google_containers --registry-mirror=https://registry.docker-cn.com --insecure-registry=registry.tsingj.local --vm-driver=&apos;vmwarefusion&apos;使用shadowsocks的时候，这样设置： local_ip=127.0.0.1 alias proxy=&apos;export all_proxy=socks5://${local_ip}:1080 ALL_PROXY=socks5://${local_ip}:1081 http_proxy=http://${local_ip}:1081 HTTP_PROXY=http://${local_ip}:1081 https_proxy=http://${local_ip}:1081 HTTPS_PROXY=http://${local_ip}:1081 no_proxy=tsingj.local,localhost,127.0.0.1,10.18.0.19,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24,192.168.0.0/16 NO_PROXY=tsingj.local,localhost,127.0.0.1,10.18.0.19,10.96.0.0/12,192.168.99.0/24,192.168.39.0/24,192.168.0.0/16&apos; proxy2.2 add hosts to pull imagesminikube ssh sudo echo &quot;10.18.0.18 registry.tsingj.local&quot; &gt;&gt;/etc/hosts exit3. 停止/开启集群服务minikube stop # 关闭集群服务 minikube start # 开启集群服务， 注意上述2.1章节proxy的设置是临时的，执行minikube start时需要重新设置proxy问题1、’vmwarefusion’ 驱动程序报告了一个问题：vmrun path check: exec: “vmrun”: executable file not found in $PATH建议：Install VMWare Fusion文档：https://minikube.sigs.k8s.io/docs/reference/drivers/vmwarefusion/似乎并未安装 vmwarefusions brew install docker-machine-driver-vmware brew services start docker-machine minikube delete minikube start --vm-driver=virtualbox --registry-mirror=https://registry.docker-cn.com --image-mirror-country=cn --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers minikube start --vm-driver=hyperkit --registry-mirror=https://registry.docker-cn.com --image-mirror-country=cn --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers minikube start --cpus 4 --memory 8192 --disk-size=100g --vm-driver=hyperkit --insecure-registry=harbor.tsingj.local --registry-mirror=https://registry.docker-cn.com --image-mirror-country=cn --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers minikube start --cpus 4 --memory 8192 --disk-size=100g --vm-driver=docker --insecure-registry=harbor.tsingj.local --registry-mirror=https://registry.docker-cn.com --image-mirror-country=cn --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers minikube start --cpus 4 --memory 8192 --disk-size=100g --insecure-registry=harbor.tsingj.local --registry-mirror=https://registry.docker-cn.com --image-mirror-country=cn --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers minikube start安装镜像参考链接https://kubernetes.io/zh/docs/setup/learning-environment/minikube/ 让我们使用名为 echoserver 的镜像创建一个 Kubernetes Deployment，并使用 –port 在端口 8080 上暴露服务。echoserver 是一个简单的 HTTP 服务器。 kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080要访问 hello-minikube Deployment，需要将其作为 Service 公开 kubectl expose deployment hello-minikube --type=NodePort获取暴露 Service 的 URL 以查看 Service 的详细信息： minikube service hello-minikube --url删除 hello-minikube Service： kubectl delete services hello-minikube删除 hello-minikube Deployment： kubectl delete deployment hello-minikube 停止本地 Minikube 集群： minikube stop删除本地 Minikube 集群： minikube deletedocker-machine-driver-hyperkitbrew install kubectl brew install minikube brew install docker-machine-driver-hyperkit sudo chown root:wheel /usr/local/opt/docker-machine-driver-hyperkit/bin/docker-machine-driver-hyperkit sudo chmod u+s /usr/local/opt/docker-machine-driver-hyperkit/bin/docker-machine-driver-hyperkit minikube start --vm-driver hyperkit","categories":[],"tags":[]},{"title":"docker/mac_nfs","slug":"docker/mac_nfs","date":"2021-03-05T02:51:50.101Z","updated":"2021-03-05T02:51:50.101Z","comments":true,"path":"2021/03/05/docker/mac_nfs/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/docker/mac_nfs/","excerpt":"","text":"mac nfscreate dirmkdir -p /data/nfs_data/data_privpy_dev/data/auth mkdir -p /data/nfs_data/data_privpy_dev/data/scripts sudo chmod -R 777 /data \bvi /etc/exports添加： /opt/data/k8s -alldirs -maproot=root:wheel -network=192.168.0.0 -mask=255.255.0.0默认为可读写，加入 -ro 为只读 readonly-alldirs 是共享 /Users 目录下所有文件-network -mask 制定工作在那个网段内-maproot=root:wheel，把client端的root用户映射为Mac OS上的root，client端的root组映射为Mac OS上的wheel (gid=0) 组。这个参数非常重要，否则会nfsroot链接失败。修改配置后使用sudo nfsd checkexports进行检查。 控制服务sudo nfsd enable sudo nfsd disable sudo nfsd start sudo nfsd stop sudo nfsd restart sudo nfsd status查看共享状态 showmount -e设置nfs server权限sudo vi /etc/nfs.conf添加： nfs.server.mount.require_resv_port = 0 sudo nfsd restart测试mount -t nfs 192.168.50.120:/data/nfs_data/ /tmp/nfs_data","categories":[],"tags":[]},{"title":"data/tech","slug":"data/tech","date":"2021-03-05T02:51:50.100Z","updated":"2021-03-05T02:51:50.100Z","comments":true,"path":"2021/03/05/data/tech/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/data/tech/","excerpt":"","text":"http://charm-crypto.io/公钥可搜索加密https://blog.csdn.net/u014134327/article/details/103788783 http://www.jos.org.cn/html/2014/4/4554.htm","categories":[],"tags":[]},{"title":"data/数据清理","slug":"data/数据清理","date":"2021-03-05T02:51:50.100Z","updated":"2021-03-05T02:51:50.100Z","comments":true,"path":"2021/03/05/data/数据清理/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/data/%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86/","excerpt":"","text":"现金贷数据CREATE DATABASE IF NOT EXISTS cashloands DEFAULT CHARSET utf8 COLLATE utf8_general_ci;创建还款记录表DROP TABLE IF EXISTS `cl_user_borrow`; CREATE TABLE &quot;cl_user_borrow&quot; ( &quot;id&quot; bigint(20) NOT NULL AUTO_INCREMENT, &quot;user_id&quot; bigint(20) NOT NULL, &quot;penalty&quot; double(255,0) DEFAULT NULL, &quot;overdue_status&quot; int(8) DEFAULT NULL, &quot;create_time&quot; datetime DEFAULT NULL, PRIMARY KEY (&quot;id&quot;) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;1025还款数据处理cat user_borrow_1025.txt | awk &apos;{print &quot;insert into cl_user_borrow_1025(user_id, penalty, overdue_status, create_time) values(\\047&quot;$1&quot;\\047,&quot;$2&quot;,&quot;$3&quot;,\\047&quot;$4&quot;\\047);&quot;}&apos; &gt;user_borrow_1025.sql1119用户数据处理cat cl_user_base_info.csv | sed -e &apos;s/&quot;//g&apos; | sed -n &apos;2,$p&apos; | awk -F&quot;,&quot; &apos;{print &quot;insert into cl_user_base_info_1119(user_id, order_id, mobile_type, id_card_no, bureau_user_name, phone_number_house, create_time) values(&quot;$2&quot;,&quot;$3&quot;,\\047&quot;$4&quot;\\047,\\047&quot;$5&quot;\\047,\\047&quot;$6&quot;\\047,\\047&quot;$7&quot;\\047,str_to_date(\\047&quot;$8&quot;\\047,\\047%d/%m/%Y %H:%i:%S\\047));&quot;}&apos; &gt;cl_user_base_info_1119.sql 1119还款数据处理cat biz_repay_plan.csv | sed -e &apos;s/&quot;//g&apos; | sed -n &apos;2,$p&apos; | awk -F&quot;,&quot; &apos;{print &quot;insert into cl_user_borrow_1119(user_id, penalty, overdue_status, create_time) values(&quot;$1&quot;,&quot;$2&quot;,&quot;$3&quot;,str_to_date(\\047&quot;$4&quot;\\047,\\047%d/%m/%Y %H:%i:%S\\047));&quot;}&apos; &gt;cl_user_borrow_1119.sql网贷中介cat usefull.txt | sed -e &apos;s/&quot;//g&apos;| awk &apos;{print &quot;insert into user(phone, name, status) values(\\047&quot;$1&quot;\\047,\\047&quot;$2&quot;\\047,\\047&quot;0&quot;\\047);&quot;}&apos; | more","categories":[],"tags":[]},{"title":"docker/docker registry","slug":"docker/docker registry","date":"2021-03-05T02:51:50.100Z","updated":"2021-03-05T02:51:50.101Z","comments":true,"path":"2021/03/05/docker/docker registry/","link":"","permalink":"http://yankaili2006.github.io/2021/03/05/docker/docker%20registry/","excerpt":"","text":"1、安装docker run -d --restart=always -e SETTINGS_FLAVOR=dev -e STORAGE_PATH=/data/registry -v /data/docker-images:/data/registry -p 5000:5000 registry docker run -d -e SETTINGS_FLAVOR=dev -e STORAGE_PATH=/data/registry -v /data/docker-images:/data/registry -p 5000:5000 registry2、配置 老版本： sudo sh -c &#39;echo DOCKER_OPTS=\\&quot;--insecure-registry www.zhixuntongda.com:5000\\&quot; &gt;&gt; /etc/default/docker&#39; 新版本: 123vim &#x2F;etc&#x2F;docker&#x2F;daemon.json&#123; &quot;insecure-registries&quot;:[&quot;www.zhixuntongda.com:5000&quot;] &#125;sudo service docker restart 3、推送拉取image到本地 docker pull library/centos6本地对份镜像启动起来，形成container，给container去另外一个名字 docker tag 2b4d84fdd66f www.zhixuntongda.com:5000/xwl-client docker tag 2e33c17a7f5f www.zhixuntongda.com:5000/xwl-dubbo最后将新的docker images推送到私服上 docker push www.zhixuntongda.com:5000/xwl-client docker push www.zhixuntongda.com:5000/xwl-dubbo4、测试从私服上搜索存在哪些可用镜像 $curl http://www.zhixuntongda.com:5000/v2/_catalog {&quot;repositories&quot;:[&quot;xwl-client&quot;]} $ curl http://www.zhixuntongda.com:5000/v2/xwl-client/tags/list {&quot;name&quot;:&quot;xwl-client&quot;,&quot;tags&quot;:[&quot;latest&quot;]}","categories":[],"tags":[]}],"categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yankaili2006.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"一聪财经","slug":"一聪财经","permalink":"http://yankaili2006.github.io/categories/%E4%B8%80%E8%81%AA%E8%B4%A2%E7%BB%8F/"}],"tags":[{"name":"历史","slug":"历史","permalink":"http://yankaili2006.github.io/tags/%E5%8E%86%E5%8F%B2/"},{"name":"唐朝","slug":"唐朝","permalink":"http://yankaili2006.github.io/tags/%E5%94%90%E6%9C%9D/"},{"name":"数据要素化","slug":"数据要素化","permalink":"http://yankaili2006.github.io/tags/%E6%95%B0%E6%8D%AE%E8%A6%81%E7%B4%A0%E5%8C%96/"},{"name":"区块链","slug":"区块链","permalink":"http://yankaili2006.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"},{"name":"立法","slug":"立法","permalink":"http://yankaili2006.github.io/tags/%E7%AB%8B%E6%B3%95/"},{"name":"量化交易","slug":"量化交易","permalink":"http://yankaili2006.github.io/tags/%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93/"},{"name":"清结算","slug":"清结算","permalink":"http://yankaili2006.github.io/tags/%E6%B8%85%E7%BB%93%E7%AE%97/"},{"name":"虚拟券商","slug":"虚拟券商","permalink":"http://yankaili2006.github.io/tags/%E8%99%9A%E6%8B%9F%E5%88%B8%E5%95%86/"},{"name":"Fcoin","slug":"Fcoin","permalink":"http://yankaili2006.github.io/tags/Fcoin/"},{"name":"交易挖矿","slug":"交易挖矿","permalink":"http://yankaili2006.github.io/tags/%E4%BA%A4%E6%98%93%E6%8C%96%E7%9F%BF/"},{"name":"FT","slug":"FT","permalink":"http://yankaili2006.github.io/tags/FT/"},{"name":"价格形成机制","slug":"价格形成机制","permalink":"http://yankaili2006.github.io/tags/%E4%BB%B7%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9C%BA%E5%88%B6/"},{"name":"去中心化交易所","slug":"去中心化交易所","permalink":"http://yankaili2006.github.io/tags/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E4%BA%A4%E6%98%93%E6%89%80/"},{"name":"Fomo3D","slug":"Fomo3D","permalink":"http://yankaili2006.github.io/tags/Fomo3D/"},{"name":"ETH","slug":"ETH","permalink":"http://yankaili2006.github.io/tags/ETH/"},{"name":"DECP","slug":"DECP","permalink":"http://yankaili2006.github.io/tags/DECP/"},{"name":"EOS","slug":"EOS","permalink":"http://yankaili2006.github.io/tags/EOS/"},{"name":"RAM","slug":"RAM","permalink":"http://yankaili2006.github.io/tags/RAM/"},{"name":"互金","slug":"互金","permalink":"http://yankaili2006.github.io/tags/%E4%BA%92%E9%87%91/"},{"name":"消费金融","slug":"消费金融","permalink":"http://yankaili2006.github.io/tags/%E6%B6%88%E8%B4%B9%E9%87%91%E8%9E%8D/"},{"name":"P2P","slug":"P2P","permalink":"http://yankaili2006.github.io/tags/P2P/"},{"name":"Bancor","slug":"Bancor","permalink":"http://yankaili2006.github.io/tags/Bancor/"},{"name":"智能合约","slug":"智能合约","permalink":"http://yankaili2006.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"},{"name":"加密货币","slug":"加密货币","permalink":"http://yankaili2006.github.io/tags/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81/"},{"name":"流动性","slug":"流动性","permalink":"http://yankaili2006.github.io/tags/%E6%B5%81%E5%8A%A8%E6%80%A7/"}]}